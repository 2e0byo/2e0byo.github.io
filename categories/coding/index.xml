<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on Jack of All Trades</title><link>https://2e0byo.github.io/categories/coding/</link><description>Recent content in Coding on Jack of All Trades</description><generator>Hugo -- gohugo.io</generator><managingEditor>2e0byo@gmail.com (John Morris)</managingEditor><webMaster>2e0byo@gmail.com (John Morris)</webMaster><atom:link href="https://2e0byo.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Is (sort-of) Functional</title><link>https://2e0byo.github.io/post/coding/python-is-sortof-functional/</link><pubDate>Wed, 24 Nov 2021 12:56:45 +0000</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/python-is-sortof-functional/</guid><description>I recently had to parse a csv file which looks like this:
&amp;#34;key&amp;#34;,&amp;#34;val&amp;#34; &amp;#34;key&amp;#34;,&amp;#34;val&amp;#34; &amp;#34;key&amp;#34;,&amp;#34;val&amp;#34; &amp;#34;col1&amp;#34;,&amp;#34;col2&amp;#34;,&amp;#34;col3&amp;#34;,&amp;#34;col4&amp;#34; ... row data here The obvious, imperative solution would be:
from csv import DictReader def parse(f): props = {} for line in f: if not line.strip(): break k, v = line.strip().replace(&amp;#39;&amp;#34;&amp;#39;, &amp;#34;&amp;#34;).split(&amp;#34;,&amp;#34;) props[k] = v reader = DictReader(f) data = list(reader) return props, data With the walrus operator we can save a few lines at the cost of non-obvious syntax:</description></item><item><title>“Modern Authentication”: Outlook365 in Emacs</title><link>https://2e0byo.github.io/post/coding/modern-authentication/</link><pubDate>Fri, 29 Oct 2021 16:37:35 +0100</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/modern-authentication/</guid><description>A few weeks ago I received an email from the university stating:
Further to our previous communication advising about a change to basic authentication for Durham mailboxes, on 28th October 2021 we will be removing the ability to connect to University email via IMAP and our records indicate that you currently access email in this way.
This, apparently, is down to the fact that
Basic authentication is no longer secure enough to support modern working as it does not support security features such as Multi-Factor Authentication (MFA).</description></item><item><title>Cleaning Scanned Pdfs</title><link>https://2e0byo.github.io/post/coding/cleaning-scanned-pdfs/</link><pubDate>Sat, 24 Oct 2020 18:01:04 +0100</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/cleaning-scanned-pdfs/</guid><description>This post is largely a log so I remember how to do it next time, but if anyone else has a bunch of scans to convert, read on&amp;hellip;
Background Frequently in academia&amp;mdash;and probably in much of the modern world&amp;mdash;one has to handle things which began life as books, hit the glass of a scanner, and became pdfs. Scanning is hard, and unless one has a lot of patience, the resulting pdfs are generally pretty all over the place: sometimes pages are upside down, frequently the book (which was not made to lie flat) does not want to flatten on the glass, and often the scanner has simply picked a nearby standard page size.</description></item><item><title>Anti Rsi</title><link>https://2e0byo.github.io/post/coding/anti-rsi/</link><pubDate>Thu, 08 Oct 2020 18:12:00 +0100</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/anti-rsi/</guid><description>There are lots of anti-rsi packages out there for windows. I even found a few for Linux. None did what I wanted them to do: to enforce short and long breaks at configurable intervals, allowing me to push them back when I was in the middle of something, but getting increasingly insistent that I actually took them.
Enter anti-rsi, a python script which does everything an anti-rsi package needs to do and nothing more.</description></item><item><title>Volatile Tmp</title><link>https://2e0byo.github.io/post/coding/volatile-tmp/</link><pubDate>Wed, 07 Oct 2020 11:00:07 +0100</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/volatile-tmp/</guid><description>What does one do with temporary files? For things one really doesn’t need, there’s /tmp, which is wiped on boot&amp;mdash;though sometimes it’s a ramdisk, and one should be wary of dropping large files into ramdisks. But what about e.g. downloaded isos, pdfs prepared for printing, and the like? Things one needs now, might need tomorrow, but definitely won’t need in a year’s time?
Like most people I used to use ~/Downloads and go through it (with ncdu) every time it got too large.</description></item><item><title>CLI Countdown Timer</title><link>https://2e0byo.github.io/post/coding/cli-countdown-timer/</link><pubDate>Tue, 29 Sep 2020 13:05:10 +0100</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/cli-countdown-timer/</guid><description>I wrote this a while ago, and it’s been in use ever since: a very simple script which counts down (or up) while printing the remaining time. Controlled with standard job control, it’s one up on sleep as you can see how long is left. This is occasionally handy; if I only have ten seconds on the clock before lunch I’ll not start something new, but if I’ve got fifteen it might make sense.</description></item><item><title>ChuffChuff (cheaply)</title><link>https://2e0byo.github.io/post/coding/chuffchuff-cheaply/</link><pubDate>Wed, 29 Aug 2018 08:12:22 +0000</pubDate><author>2e0byo@gmail.com (John Morris)</author><guid>https://2e0byo.github.io/post/coding/chuffchuff-cheaply/</guid><description>On a rainy day here I wondered exactly when I should book a ticket up to Durham for another term. Most of the booking websites will help you, but not much: it&amp;rsquo;s tiresome to check a few days to see what the price variation is—and it can be fairly enormous. I was also curious as to what the long term trends might be: they don&amp;rsquo;t just seem to go down. All of which suggested some code to screenscrape all the tickets from somewhere and analyse them.</description></item></channel></rss>